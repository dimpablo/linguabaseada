=== üìÑ task1.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8" />
  <title>–ó–∞–¥–∞–Ω–∏–µ 1: –†–∏—Å–æ–≤–∞–Ω–∏–µ</title>
  <script src="https://cdn.jsdelivr.net/npm/hanzi-writer@3.5/dist/hanzi-writer.min.js"></script>
  <style>
    body, html {
      margin: 0;
      padding: 0;
      width: 100%;
      height: 100%;
      font-family: 'Segoe UI', Arial, sans-serif;
      overflow: hidden;
    }

    #splash-screen {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: #f0f4ff;
      display: flex;
      justify-content: center;
      align-items: center;
      z-index: 1000;
      flex-direction: column;
      text-align: center;
      color: #333;
    }

    #splash-screen h1 {
      font-size: 3.5rem;
      font-weight: bold;
      color: #2c55d9;
      text-shadow: 2px 2px 8px rgba(0,0,0,0.1);
      margin: 0;
      animation: fadeIn 0.5s ease-in;
    }

    #splash-screen p {
      font-size: 1.5rem;
      color: #555;
      margin-top: 20px;
    }

    @keyframes fadeIn {
      from { opacity: 0; transform: scale(0.9); }
      to { opacity: 1; transform: scale(1); }
    }

    #character-target-div {
      display: none;
      margin: 40px auto;
      width: 300px;
      height: 300px;
    }

    /* === –ú–µ—Ä—Ü–∞—é—â–∏–π overlay === */
    #feedback-overlay {
      pointer-events: none;
      position: fixed;
      inset: 0;
      opacity: 0;
      transition: opacity 0s;
      z-index: 9999;
    }

    @keyframes flash {
      0% { opacity: 0; }
      50% { opacity: 0.7; }
      100% { opacity: 0; }
    }

    #feedback-overlay.success {
      background: green;
    }

    #feedback-overlay.error {
      background: red;
    }

    #feedback-overlay.animate {
      opacity: 0.7;
      animation: flash 0.8s ease-out;
    }
  </style>
</head>
<body>

<!-- –ó–∞—Å—Ç–∞–≤–∫–∞ -->
<div id="splash-screen">
  <h1>–ù–∞—Ä–∏—Å—É–π –∑–¥–µ—Å—å</h1>
  <p>–ª—é–±–æ–π –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏–∑ —Å–ª–æ–≤–∞—Ä—è —É—Ä–æ–∫–∞!</p>
</div>

<!-- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è HanziWriter -->
<div id="character-target-div"></div>

<!-- Overlay –¥–ª—è –º–µ—Ä—Ü–∞–Ω–∏—è -->
<div id="feedback-overlay"></div>

<script>
  // ‚úÖ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏ –±–∞–ª–ª–æ–≤
  function sendResult(success, message, points = 0) {
    window.parent.postMessage({
      type: "TASK_RESULT",
      success: !!success,
      message: message || (success ? "–ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ" : "–û—à–∏–±–∫–∞"),
      points: points // ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–∞–ª–ª—ã
    }, "*");
  }

  // ‚úÖ –§—É–Ω–∫—Ü–∏—è –º–µ—Ä—Ü–∞–Ω–∏—è —ç–∫—Ä–∞–Ω–∞
  function flashScreen(color) {
    const overlay = document.getElementById('feedback-overlay');
    overlay.className = '';
    overlay.classList.add(color === 'success' ? 'success' : 'error');
    overlay.classList.add('animate');

    setTimeout(() => {
      overlay.classList.remove('animate');
    }, 800);
  }

  let totalPointsEarned = 0;
  let strokeCount = 0;
  let mistakes = 0;

  window.onload = function() {
    const splashScreen = document.getElementById('splash-screen');
    const characterDiv = document.getElementById('character-target-div');
    const splashH1 = splashScreen.querySelector('h1');
    const splashP = splashScreen.querySelector('p');

    setTimeout(() => {
      const hash = window.location.hash.slice(1);
      if (!hash) {
        splashP.textContent = "‚ö†Ô∏è –ù–µ —É–∫–∞–∑–∞–Ω –∏–µ—Ä–æ–≥–ª–∏—Ñ";
        sendResult(false, "–ù–µ —É–∫–∞–∑–∞–Ω –∏–µ—Ä–æ–≥–ª–∏—Ñ", 0);
        return;
      }

      const char = decodeURIComponent(hash);

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–µ—Ä–æ–≥–ª–∏—Ñ
      splashH1.textContent = char;

      // === –ü–æ–ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–µ—Ä–æ–≥–ª–∏—Ñ–∞ ===
      HanziWriter.loadCharacterData(char)
        .then(charData => {
          // ‚úÖ –î–∞–Ω–Ω—ã–µ –µ—Å—Ç—å ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º –∫–≤–∏–∑
          splashScreen.style.display = 'none';
          characterDiv.style.display = 'block';

          // –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à—Ç—Ä–∏—Ö–æ–≤
          strokeCount = charData.strokes.length;

          const writer = HanziWriter.create('character-target-div', char, {
            width: 300,
            height: 300,
            showCharacter: false,
            showOutline: false,
            showHintAfterMisses: 1,
            highlightOnComplete: false,
            padding: 5
          });

          writer.quiz({
            leniency: 2.0,

            onCorrectStroke: function(strokeData) {
              // ‚úÖ +1 –±–∞–ª–ª –∑–∞ –∫–∞–∂–¥—ã–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —à—Ç—Ä–∏—Ö
              totalPointsEarned += 1;
              console.log(`‚úÖ –®—Ç—Ä–∏—Ö ${strokeData.strokeNum} ‚Äî +1 –±–∞–ª–ª`);
            },

            onMistake: function(strokeData) {
              console.log("‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —à—Ç—Ä–∏—Ö–µ", strokeData.strokeNum);
              flashScreen('error');
              mistakes++;
            },

            onComplete: function(summaryData) {
              console.log("üéØ –ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω:", summaryData);
              flashScreen('success');

              // ‚úÖ +2 –±–∞–ª–ª–∞ –∑–∞ –ø–æ–ª–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
              totalPointsEarned += 2;

              sendResult(
                true,
                `–ò–µ—Ä–æ–≥–ª–∏—Ñ "${char}" –Ω–∞—Ä–∏—Å–æ–≤–∞–Ω –≤–µ—Ä–Ω–æ`,
                totalPointsEarned
              );
            }
          });

        })
        .catch(err => {
          // ‚ùå –î–∞–Ω–Ω—ã—Ö –Ω–µ—Ç ‚Äî –¥—Ä–µ–≤–Ω–∏–π –∏–µ—Ä–æ–≥–ª–∏—Ñ
          console.warn(`üö´ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–µ—Ä–æ–≥–ª–∏—Ñ–∞: ${char}`, err);

          // === –û–°–¢–ê–í–õ–Ø–ï–ú –ó–ê–°–¢–ê–í–ö–£, –ú–ï–ù–Ø–ï–ú –¢–ï–ö–°–¢ ===
          splashP.innerHTML = `
            –û—á–µ–Ω—å –¥—Ä–µ–≤–Ω–∏–π –∏ —Ä–µ–¥–∫–∏–π –∏–µ—Ä–æ–≥–ª–∏—Ñ üòî<br>
            –°–æ—Ñ—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –µ–≥–æ –æ—Ç—Ä–∏—Å–æ–≤–∫—É.<br>
            <strong>–ü—Ä–∏–¥—ë—Ç—Å—è –≤—ã–ø–∏—Å–∞—Ç—å –µ–≥–æ –æ—Ç —Ä—É–∫–∏ ‚úçÔ∏è</strong>
          `;

          // –ú–µ—Ä—Ü–∞–Ω–∏–µ ‚Äî –æ—à–∏–±–∫–∞
          flashScreen('error');

          // ‚úÖ –ù–∏—á–µ–≥–æ –Ω–µ —à—Ç—Ä–∞—Ñ—É–µ–º –∏ –Ω–µ –Ω–∞–≥—Ä–∞–∂–¥–∞–µ–º
          setTimeout(() => {
            sendResult(
              true,
              `–î—Ä–µ–≤–Ω–∏–π –∏–µ—Ä–æ–≥–ª–∏—Ñ "${char}" ‚Äî –∑–∞–¥–∞–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ (–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö)`,
              0 // üü¢ 0 –±–∞–ª–ª–æ–≤ ‚Äî –Ω–µ –≤–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            );
          }, 1200);
        });
    }, 1000);
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–∫—Ä—ã–ª –æ–∫–Ω–æ –±–µ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è)
  window.addEventListener('beforeunload', () => {
    if (totalPointsEarned === 0 && mistakes > 0) {
      // ‚ùå –ü—Ä–æ–ø—É—Å–∫ —Å –æ—à–∏–±–∫–∞–º–∏ ‚Äî —à—Ç—Ä–∞—Ñ -1
      sendResult(false, "–ó–∞–¥–∞–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ", -1);
    }
  });
</script>

<!-- –°–∏–≥–Ω–∞–ª—ã —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º—É –æ–∫–Ω—É -->
<script>
  window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  window.parent.postMessage({ type: "DO_HANZI", valid: true }, "*");
</script>

</body>
</html>

=== üìÑ task10.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>–ó–∞–¥–∞–Ω–∏–µ: ‰æØËôé‰ΩôÂÖ∂ÂæóÊ±ù</title>
</head>
<body>
  <h2>–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç —Ñ—Ä–∞–∑–∞ ¬´‰æØËôé‰ΩôÂÖ∂ÂæóÊ±ù¬ª?</h2>
  <p><strong>–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –ª–∏—á–Ω—ã–µ –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏—è.</strong></p>
  <div class="pinyin-container">
    <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">–ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å</button>
    <div class="pinyin-text">H√≥u H«î y√∫ q√≠ d√© r«î</div>
  </div>
  <div id="answers"></div>
  <button onclick="check('answers', 'result', options)">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
  <p id="result"></p>
  <script>
    const options = [
      { text: "–•–æ—É –•—É, —è –ø–æ–ª—É—á—É —Ç–µ–±—è (–≤ –∂—ë–Ω—ã)", correct: true },
      { text: "–•–æ—É –•—É, —Ç—ã –ø–æ–ª—É—á–∏—à—å –º–µ–Ω—è", correct: false },
      { text: "–Ø –æ—Ç–¥–∞–º —Ç–µ–±—è –•–æ—É –•—É", correct: false },
      { text: "–•–æ—É –•—É, —è –Ω–µ –ø–æ–ª—É—á—É —Ç–µ–±—è", correct: false }
    ];

    function shuffle(array) {
      const arr = [...array];
      for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
      }
      return arr;
    }

    function renderOptions() {
      const shuffled = shuffle(options);
      const container = document.getElementById("answers");
      container.innerHTML = "";
      shuffled.forEach((opt, index) => {
        const label = document.createElement("label");
        const input = document.createElement("input");
        input.type = "radio";
        input.name = "q";
        input.value = opt.correct ? "1" : "0_" + index;
        input.dataset.correct = opt.correct.toString();
        label.appendChild(input);
        label.appendChild(document.createTextNode(opt.text));
        container.appendChild(label);
      });
    }

    function check(containerId, resultId, optionsArray) {
      const selected = document.querySelector('input[name="q"]:checked');
      const resultEl = document.getElementById(resultId);
      if (!selected) {
        resultEl.textContent = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç.";
        return;
      }
      if (selected.dataset.correct === "true") {
        resultEl.textContent = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!";
        sendResult(true);
      } else {
        resultEl.textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ.";
        sendResult(false);
      }
    }

    function sendResult(success) {
      window.parent.postMessage({ type: "TASK_RESULT", success }, "*");
    }

    window.onload = renderOptions;
  </script>
</body>
</html>
<script>window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");</script>

=== üìÑ task11.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>–ó–∞–¥–∞–Ω–∏–µ: Â∏ùÂÖ∂‰ΩúÁéãÁ•∏</title>
</head>
<body>
  <h2>–ö–∞–∫–æ–π –≥–ª–∞–≥–æ–ª —Ç—Ä–µ–±—É–µ—Ç –¥–≤–æ–π–Ω–æ–≥–æ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –¥—Ä–µ–≤–Ω–µ–∫–∏—Ç–∞–π—Å–∫–æ–º?</h2>
  <p><strong>–ü—Ä–∏–º–µ—Ä: ¬´Â∏ùÂÖ∂‰ΩúÁéãÁ•∏¬ª</strong></p>
  <div class="pinyin-container">
    <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">–ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å</button>
    <div class="pinyin-text">D√¨ q√≠ zu√≤ w√°ng hu√≤</div>
  </div>
  <div id="answers"></div>
  <button onclick="check('answers', 'result', options)">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
  <p id="result"></p>
  <script>
    const options = [
      { text: "‰Ωú (zu√≤) ‚Äî –ø—Ä–∏—á–∏–Ω—è—Ç—å, —Å–æ–∑–¥–∞–≤–∞—Ç—å", correct: true },
      { text: "Ê±Ç (qi√∫) ‚Äî –ø—Ä–æ—Å–∏—Ç—å", correct: false },
      { text: "Ëá≥ (zh√¨) ‚Äî –¥–æ—Å—Ç–∏–≥–∞—Ç—å", correct: false },
      { text: "Âçú (b«î) ‚Äî –≥–∞–¥–∞—Ç—å", correct: false }
    ];

    function shuffle(array) {
      const arr = [...array];
      for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
      }
      return arr;
    }

    function renderOptions() {
      const shuffled = shuffle(options);
      const container = document.getElementById("answers");
      container.innerHTML = "";
      shuffled.forEach((opt, index) => {
        const label = document.createElement("label");
        const input = document.createElement("input");
        input.type = "radio";
        input.name = "q";
        input.value = opt.correct ? "1" : "0_" + index;
        input.dataset.correct = opt.correct.toString();
        label.appendChild(input);
        label.appendChild(document.createTextNode(opt.text));
        container.appendChild(label);
      });
    }

    function check(containerId, resultId, optionsArray) {
      const selected = document.querySelector('input[name="q"]:checked');
      const resultEl = document.getElementById(resultId);
      if (!selected) {
        resultEl.textContent = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç.";
        return;
      }
      if (selected.dataset.correct === "true") {
        resultEl.textContent = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!";
        sendResult(true);
      } else {
        resultEl.textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ.";
        sendResult(false);
      }
    }

    function sendResult(success) {
      window.parent.postMessage({ type: "TASK_RESULT", success }, "*");
    }

    window.onload = renderOptions;
  </script>
</body>
</html>
<script>window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");</script>

=== üìÑ task12.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>–£—Ä–æ–∫ 5: –ì–∞–¥–∞–Ω–∏—è –æ –ø–æ–º–æ—â–∏ –ù–µ–±–µ—Å–Ω–æ–≥–æ –í–ª–∞–¥—ã–∫–∏</title>
</head>
<body>
<h2>–ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–Ω—è—Ç—å –∏–Ω–≤–µ—Ä—Å–∏—é –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏—è –≤ –æ—Ç—Ä–∏—Ü–∞–Ω–∏–∏?</h2>
<p><strong>–ü—Ä–∏–º–µ—Ä: ¬´Â∏ù‰∏çÊàëÈôçÁÜØ¬ª</strong></p>

<div class="pinyin-container">
    <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">
        –ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å
    </button>
    <div class="pinyin-text">d√¨ b√π w«í ji√†ng h√†n</div>
</div>

<p>–≠—Ç–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏–∑ –≥–∞–¥–∞—Ç–µ–ª—å–Ω–æ–π –Ω–∞–¥–ø–∏—Å–∏. –ö–∞–∫–æ–≤–æ –µ–≥–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏ –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ?</p>

<div id="answers"></div>
<button onclick="check('answers', 'result', options)">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
<p id="result"></p>

<script>
  const options = [
    { text: "¬´–ù–µ–±–µ—Å–Ω—ã–π –í–ª–∞–¥—ã–∫–∞ –Ω–µ –ø–æ—à–ª—ë—Ç –Ω–∞–º –∑–∞—Å—É—Ö—É¬ª ‚Äî –≤–µ—Ä–Ω–æ: –∏–Ω–≤–µ—Ä—Å–∏—è –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏—è ¬´Êàë¬ª –ø–µ—Ä–µ–¥ –≥–ª–∞–≥–æ–ª–æ–º –≤ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏", correct: true },
    { text: "¬´–ù–µ–±–µ—Å–Ω—ã–π –í–ª–∞–¥—ã–∫–∞ –Ω–µ –ø–æ—à–ª—ë—Ç –∑–∞—Å—É—Ö—É –∏–º¬ª ‚Äî –Ω–µ–≤–µ—Ä–Ω–æ: –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏–µ ¬´Êàë¬ª –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ ¬´–Ω–∏–º¬ª, –∞ –Ω–µ –∫ ¬´–Ω–∞–º¬ª", correct: false },
    { text: "¬´–ù–µ–±–µ—Å–Ω—ã–π –í–ª–∞–¥—ã–∫–∞ –Ω–µ –º—ã –ø–æ—à–ª—ë–º –∑–∞—Å—É—Ö—É¬ª ‚Äî –Ω–µ–≤–µ—Ä–Ω–æ: —ç—Ç–æ –±–µ—Å—Å–º—ã—Å–ª–∏—Ü–∞, –Ω–∞—Ä—É—à–µ–Ω–∞ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∞", correct: false },
    { text: "¬´–ù–µ–±–µ—Å–Ω—ã–π –í–ª–∞–¥—ã–∫–∞ –Ω–µ –ø–æ—à–ª—ë—Ç –∑–∞—Å—É—Ö—É¬ª ‚Äî –≤–µ—Ä–Ω–æ, –Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è —Ä–æ–ª—å –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏—è ¬´Êàë¬ª", correct: false }
  ];

  function shuffle(array) {
    const arr = [...array];
    for (let i = arr.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [arr[i], arr[j]] = [arr[j], arr[i]];
    }
    return arr;
  }

  function renderOptions() {
    const shuffled = shuffle(options);
    const container = document.getElementById("answers");
    if (!container) {
      console.error("–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä #answers –Ω–µ –Ω–∞–π–¥–µ–Ω");
      return;
    }
    container.innerHTML = "";

    shuffled.forEach((opt, index) => {
      const label = document.createElement("label");
      const input = document.createElement("input");
      input.type = "radio";
      input.name = "q";
      input.value = opt.correct ? "1" : "0_" + index;
      input.dataset.correct = opt.correct.toString();

      label.appendChild(input);
      label.appendChild(document.createTextNode(opt.text));
      container.appendChild(label);
    });
  }

  function check(containerId, resultId, optionsArray) {
    const selected = document.querySelector('input[name="q"]:checked');
    const resultEl = document.getElementById(resultId);

    if (!selected) {
      resultEl.textContent = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç.";
      return;
    }

    if (selected.dataset.correct === "true") {
      resultEl.textContent = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –≠—Ç–æ –ø—Ä–∏–º–µ—Ä –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–π –∏–Ω–≤–µ—Ä—Å–∏–∏ –±–µ—Å–ø—Ä–µ–¥–ª–æ–∂–Ω–æ–≥–æ –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏—è ¬´Êàë¬ª –≤ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏: ¬´Â∏ù‰∏çÊàëÈôçÁÜØ¬ª = ¬´–ù–µ–±–µ—Å–Ω—ã–π –í–ª–∞–¥—ã–∫–∞ –Ω–µ –ø–æ—à–ª—ë—Ç –Ω–∞–º –∑–∞—Å—É—Ö—É¬ª.";
      sendResult(true);
    } else {
      resultEl.textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –í—Å–ø–æ–º–Ω–∏—Ç–µ –ø—Ä–∞–≤–∏–ª–æ: –≤ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏–µ-–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ç–∞–≤–∏—Ç—Å—è –ø–µ—Ä–µ–¥ –≥–ª–∞–≥–æ–ª–æ–º, —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –æ—Ç—Ä–∏—Ü–∞–Ω–∏—è.";
      sendResult(false);
    }
  }

  function sendResult(success) {
    window.parent.postMessage({ type: "TASK_RESULT", success }, "*");
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  window.onload = renderOptions;
</script>
</body>
</html>

<!-- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç -->
<script>window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");</script>

=== üìÑ task13.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>–£—Ä–æ–∫ 5: –ë–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –ø–æ–º–æ—â—å –∏ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–µ –¥–µ–ª–∞</title>
</head>
<body>
<h2>–ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–Ω—è—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ ¬´Â∏ù‰∏çÊàëÂÖ∂Âèó‰Ωë¬ª?</h2>
<p><strong>–ü—Ä–∏–º–µ—Ä –∏–∑ —Ç–µ–∫—Å—Ç–∞: ¬´Â∏ù‰∏çÊàëÂÖ∂Âèó‰Ωë¬ª</strong></p>

<div class="pinyin-container">
    <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">
        –ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å
    </button>
    <div class="pinyin-text">d√¨ b√π w«í q√≠ sh√≤u y√≤u</div>
</div>

<p>–≠—Ç–æ –≥–∞–¥–∞—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∑–∞—Ç—Ä–∞–≥–∏–≤–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π –£—Ä–æ–∫–∞ 5. –ö–∞–∫–æ–≤–æ –µ–≥–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞?</p>

<div id="answers"></div>
<button onclick="check('answers', 'result', options)">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
<p id="result"></p>

<script>
  const options = [
    { 
      text: "¬´–ù–µ–±–µ—Å–Ω—ã–π –í–ª–∞–¥—ã–∫–∞ –Ω–µ –ø–æ—à–ª—ë—Ç –Ω–∞–º –ø–æ–º–æ—â—å¬ª ‚Äî –≤–µ—Ä–Ω–æ: –∑–¥–µ—Å—å –∏–Ω–≤–µ—Ä—Å–∏—è –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏—è ¬´Êàë¬ª –ø–µ—Ä–µ–¥ –≥–ª–∞–≥–æ–ª–æ–º –≤ –æ—Ç—Ä–∏—Ü–∞–Ω–∏–∏, –∞ ¬´Âèó‰Ωë¬ª ‚Äî –ø—Ä–µ–¥–∏–∫–∞—Ç–∏–≤ —Å –¥–≤–æ–π–Ω—ã–º –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ–º (–∫–æ–º—É? —á—Ç–æ?)", 
      correct: true 
    },
    { 
      text: "¬´–ù–µ–±–µ—Å–Ω—ã–π –í–ª–∞–¥—ã–∫–∞ –Ω–µ –ø–æ—à–ª—ë—Ç –ø–æ–º–æ—â—å –∏–º¬ª ‚Äî –Ω–µ–≤–µ—Ä–Ω–æ: ¬´Êàë¬ª –Ω–µ –º–æ–∂–µ—Ç –æ–∑–Ω–∞—á–∞—Ç—å ¬´–∏—Ö¬ª, —ç—Ç–æ 1-–µ –ª–∏—Ü–æ", 
      correct: false 
    },
    { 
      text: "¬´–ù–µ–±–µ—Å–Ω—ã–π –í–ª–∞–¥—ã–∫–∞ –Ω–µ –º—ã –ø–æ–ª—É—á–∏–º –ø–æ–º–æ—â—å¬ª ‚Äî –Ω–µ–≤–µ—Ä–Ω–æ: –Ω–∞—Ä—É—à–µ–Ω–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞", 
      correct: false 
    },
    { 
      text: "¬´–ù–µ–±–µ—Å–Ω—ã–π –í–ª–∞–¥—ã–∫–∞ –Ω–µ –ø–æ—à–ª—ë—Ç –ø–æ–º–æ—â—å¬ª ‚Äî —á–∞—Å—Ç–∏—á–Ω–æ –≤–µ—Ä–Ω–æ, –Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç –≥—Ä–∞–º–º–∞—Ç–∏–∫—É: ¬´Êàë¬ª –Ω–µ –º–æ–∂–µ—Ç —Å—Ç–æ—è—Ç—å –ø–æ—Å–ª–µ ¬´‰∏ç¬ª –±–µ–∑ –∏–Ω–≤–µ—Ä—Å–∏–∏", 
      correct: false 
    }
  ];

  function shuffle(array) {
    const arr = [...array];
    for (let i = arr.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [arr[i], arr[j]] = [arr[j], arr[i]];
    }
    return arr;
  }

  function renderOptions() {
    const shuffled = shuffle(options);
    const container = document.getElementById("answers");
    if (!container) {
      console.error("–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä #answers –Ω–µ –Ω–∞–π–¥–µ–Ω");
      return;
    }
    container.innerHTML = "";

    shuffled.forEach((opt, index) => {
      const label = document.createElement("label");
      const input = document.createElement("input");
      input.type = "radio";
      input.name = "q";
      input.value = opt.correct ? "1" : "0_" + index;
      input.dataset.correct = opt.correct.toString();

      label.appendChild(input);
      label.appendChild(document.createTextNode(opt.text));
      container.appendChild(label);
    });
  }

  function check(containerId, resultId, optionsArray) {
    const selected = document.querySelector('input[name="q"]:checked');
    const resultEl = document.getElementById(resultId);

    if (!selected) {
      resultEl.textContent = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç.";
      return;
    }

    if (selected.dataset.correct === "true") {
      resultEl.innerHTML = `
        ‚úÖ <strong>–ü—Ä–∞–≤–∏–ª—å–Ω–æ!</strong><br>
        –≠—Ç–æ —Å–ª–æ–∂–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, –æ–±—ä–µ–¥–∏–Ω—è—é—â–µ–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ–º –£—Ä–æ–∫–∞ 5:<br>
        ‚Ä¢ <strong>–ü—Ä–µ–¥–∏–∫–∞—Ç–∏–≤ ¬´Âèó‰Ωë¬ª</strong> —Ç—Ä–µ–±—É–µ—Ç –¥–≤–æ–π–Ω–æ–≥–æ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è: ¬´–ø–æ—Å–ª–∞—Ç—å –ø–æ–º–æ—â—å –∫–æ–º—É?¬ª (–∫–æ—Å–≤–µ–Ω–Ω–æ–µ) –∏ ¬´—á—Ç–æ?¬ª (–ø—Ä—è–º–æ–µ).<br>
        ‚Ä¢ <strong>–ò–Ω–≤–µ—Ä—Å–∏—è ¬´‰∏çÊàëÂèó‰Ωë¬ª</strong> ‚Äî –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞ –≤ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö —Å –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏–µ–º-–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ–º.<br>
        ‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ <strong>„ÄåÊàë„Äç</strong> –∫–∞–∫ –∫–æ—Å–≤–µ–Ω–Ω–æ–≥–æ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è (—Ä–µ—Ü–∏–ø–∏–µ–Ω—Ç) –±–µ–∑ –ø—Ä–µ–¥–ª–æ–≥–∞ ‚Äî –Ω–æ—Ä–º–∞ –¥–ª—è —Ç–∞–∫–∏—Ö –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π.<br><br>
        –ü–æ–ª–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥: ¬´–ù–µ–±–µ—Å–Ω—ã–π –í–ª–∞–¥—ã–∫–∞ –Ω–µ –ø–æ—à–ª—ë—Ç –Ω–∞–º –ø–æ–º–æ—â—å¬ª.
      `;
      sendResult(true);
    } else {
      resultEl.textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –í—Å–ø–æ–º–Ω–∏—Ç–µ: –≤ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏–µ-–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫ –≥–ª–∞–≥–æ–ª—É ¬´–¥–∞—Ç—å/–ø–æ—Å–ª–∞—Ç—å¬ª —Å—Ç–∞–≤–∏—Ç—Å—è –ø–µ—Ä–µ–¥ –≥–ª–∞–≥–æ–ª–æ–º.";
      sendResult(false);
    }
  }

  function sendResult(success) {
    window.parent.postMessage({ type: "TASK_RESULT", success }, "*");
  }

  window.onload = renderOptions;
</script>
</body>
</html>

<!-- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç -->
<script>window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");</script>

=== üìÑ task14.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <title>–£—Ä–æ–∫ 5 ‚Äî –ë–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –ø–æ–º–æ—â—å –∏ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–µ —Å—É–¥—å–±—ã</title>
</head>
<body>

<h2>–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ</h2>

<div class="grid">
    <div class="cell" onclick="openModal('q1')">
        <strong>Â∏ù‰∏çÊàëÈôçÁÜØ</strong>
        <span class="status" id="status-q1">?</span>
    </div>
    <div class="cell" onclick="openModal('q2')">
        <strong>‰ΩôÂÖ∂ÂæóÊ±ù</strong>
        <span class="status" id="status-q2">?</span>
    </div>
    <div class="cell" onclick="openModal('q3')">
        <strong>Êúï‰Ωø</strong>
        <span class="status" id="status-q3">?</span>
    </div>
    <div class="cell" onclick="openModal('q4')">
        <strong>Â∏ùÂèóÊàë‰Ωë</strong>
        <span class="status" id="status-q4">?</span>
    </div>
</div>

<button onclick="checkAll()" style="width:100%; margin-top:12px;">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
<p id="result"></p>

<!-- –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ -->
<div id="modal-q1" class="modal">
    <div class="modal-content">
        <div class="modal-header">Â∏ù‰∏çÊàëÈôçÁÜØ</div>
        <div class="pinyin-container">
            <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">
                –ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å
            </button>
            <div class="pinyin-text">d√¨ b√π w«í ji√†ng h√†n</div>
        </div>
        <div class="options">
            <label><input type="radio" name="q1" value="–ù–µ–±–µ—Å–Ω—ã–π –í–ª–∞–¥—ã–∫–∞ –Ω–µ –ø–æ—à–ª—ë—Ç –Ω–∞–º –∑–∞—Å—É—Ö—É">–ù–µ–±–µ—Å–Ω—ã–π –í–ª–∞–¥—ã–∫–∞ –Ω–µ –ø–æ—à–ª—ë—Ç –Ω–∞–º –∑–∞—Å—É—Ö—É</label>
            <label><input type="radio" name="q1" value="–ù–µ–±–µ—Å–Ω—ã–π –í–ª–∞–¥—ã–∫–∞ –Ω–µ –º—ã –ø–æ—à–ª—ë–º –∑–∞—Å—É—Ö—É">–ù–µ–±–µ—Å–Ω—ã–π –í–ª–∞–¥—ã–∫–∞ –Ω–µ –º—ã –ø–æ—à–ª—ë–º –∑–∞—Å—É—Ö—É</label>
            <label><input type="radio" name="q1" value="–ù–µ–±–µ—Å–Ω—ã–π –í–ª–∞–¥—ã–∫–∞ –Ω–µ –ø–æ—à–ª—ë—Ç –∑–∞—Å—É—Ö—É –∏–º">–ù–µ–±–µ—Å–Ω—ã–π –í–ª–∞–¥—ã–∫–∞ –Ω–µ –ø–æ—à–ª—ë—Ç –∑–∞—Å—É—Ö—É –∏–º</label>
            <label><input type="radio" name="q1" value="–ù–µ–±–µ—Å–Ω—ã–π –í–ª–∞–¥—ã–∫–∞ –Ω–µ –ø–æ—à–ª—ë—Ç –∑–∞—Å—É—Ö—É">–ù–µ–±–µ—Å–Ω—ã–π –í–ª–∞–¥—ã–∫–∞ –Ω–µ –ø–æ—à–ª—ë—Ç –∑–∞—Å—É—Ö—É</label>
        </div>
        <button onclick="closeModal('q1')">OK</button>
    </div>
</div>

<div id="modal-q2" class="modal">
    <div class="modal-content">
        <div class="modal-header">‰ΩôÂÖ∂ÂæóÊ±ù</div>
        <div class="pinyin-container">
            <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">
                –ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å
            </button>
            <div class="pinyin-text">y√∫ q√≠ d√© r«î</div>
        </div>
        <div class="options">
            <label><input type="radio" name="q2" value="–Ø –ø–æ–ª—É—á—É —Ç–µ–±—è (—Ç–≤–æ—é –ø–æ–º–æ—â—å)">–Ø –ø–æ–ª—É—á—É —Ç–µ–±—è (—Ç–≤–æ—é –ø–æ–º–æ—â—å)</label>
            <label><input type="radio" name="q2" value="–Ø –ø–æ–ª—É—á—É –µ–≥–æ">–Ø –ø–æ–ª—É—á—É –µ–≥–æ</label>
            <label><input type="radio" name="q2" value="–ú—ã –ø–æ–ª—É—á–∏–º –≤–∞—Å">–ú—ã –ø–æ–ª—É—á–∏–º –≤–∞—Å</label>
            <label><input type="radio" name="q2" value="–Ø –¥–∞–º —Ç–µ–±–µ">–Ø –¥–∞–º —Ç–µ–±–µ</label>
        </div>
        <button onclick="closeModal('q2')">OK</button>
    </div>
</div>

<div id="modal-q3" class="modal">
    <div class="modal-content">
        <div class="modal-header">Êúï‰Ωø</div>
        <div class="pinyin-container">
            <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">
                –ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å
            </button>
            <div class="pinyin-text">zh√®n sh«ê</div>
        </div>
        <div class="options">
            <label><input type="radio" name="q3" value="–º–æ–π –ø–æ—Å–ª–∞–Ω–Ω–∏–∫">–º–æ–π –ø–æ—Å–ª–∞–Ω–Ω–∏–∫</label>
            <label><input type="radio" name="q3" value="—è –ø–æ—à–ª—é">—è –ø–æ—à–ª—é</label>
            <label><input type="radio" name="q3" value="—Ç–≤–æ–π –ø–æ—Å–ª–∞–Ω–Ω–∏–∫">—Ç–≤–æ–π –ø–æ—Å–ª–∞–Ω–Ω–∏–∫</label>
            <label><input type="radio" name="q3" value="–º—ã –ø–æ—à–ª—ë–º">–º—ã –ø–æ—à–ª—ë–º</label>
        </div>
        <button onclick="closeModal('q3')">OK</button>
    </div>
</div>

<div id="modal-q4" class="modal">
    <div class="modal-content">
        <div class="modal-header">Â∏ùÂèóÊàë‰Ωë</div>
        <div class="pinyin-container">
            <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">
                –ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å
            </button>
            <div class="pinyin-text">d√¨ sh√≤u w«í y√≤u</div>
        </div>
        <div class="options">
            <label><input type="radio" name="q4" value="–ù–µ–±–µ—Å–Ω—ã–π –í–ª–∞–¥—ã–∫–∞ –ø–æ—à–ª—ë—Ç –Ω–∞–º –ø–æ–º–æ—â—å">–ù–µ–±–µ—Å–Ω—ã–π –í–ª–∞–¥—ã–∫–∞ –ø–æ—à–ª—ë—Ç –Ω–∞–º –ø–æ–º–æ—â—å</label>
            <label><input type="radio" name="q4" value="–ù–µ–±–µ—Å–Ω—ã–π –í–ª–∞–¥—ã–∫–∞ –ø–æ–ª—É—á–∏—Ç –Ω–∞—à—É –ø–æ–º–æ—â—å">–ù–µ–±–µ—Å–Ω—ã–π –í–ª–∞–¥—ã–∫–∞ –ø–æ–ª—É—á–∏—Ç –Ω–∞—à—É –ø–æ–º–æ—â—å</label>
            <label><input type="radio" name="q4" value="–ù–µ–±–µ—Å–Ω—ã–π –í–ª–∞–¥—ã–∫–∞ –Ω–µ –ø–æ—à–ª—ë—Ç –ø–æ–º–æ—â–∏">–ù–µ–±–µ—Å–Ω—ã–π –í–ª–∞–¥—ã–∫–∞ –Ω–µ –ø–æ—à–ª—ë—Ç –ø–æ–º–æ—â–∏</label>
            <label><input type="radio" name="q4" value="–ù–µ–±–µ—Å–Ω—ã–π –í–ª–∞–¥—ã–∫–∞ –ø–æ–º–æ–∂–µ—Ç –º–Ω–µ">–ù–µ–±–µ—Å–Ω—ã–π –í–ª–∞–¥—ã–∫–∞ –ø–æ–º–æ–∂–µ—Ç –º–Ω–µ</label>
        </div>
        <button onclick="closeModal('q4')">OK</button>
    </div>
</div>

<script>
    const correctAnswers = {
        q1: "–ù–µ–±–µ—Å–Ω—ã–π –í–ª–∞–¥—ã–∫–∞ –Ω–µ –ø–æ—à–ª—ë—Ç –Ω–∞–º –∑–∞—Å—É—Ö—É",
        q2: "–Ø –ø–æ–ª—É—á—É —Ç–µ–±—è (—Ç–≤–æ—é –ø–æ–º–æ—â—å)",
        q3: "–º–æ–π –ø–æ—Å–ª–∞–Ω–Ω–∏–∫",
        q4: "–ù–µ–±–µ—Å–Ω—ã–π –í–ª–∞–¥—ã–∫–∞ –ø–æ—à–ª—ë—Ç –Ω–∞–º –ø–æ–º–æ—â—å"
    };

    let userAnswers = { q1: null, q2: null, q3: null, q4: null };

    function openModal(id) {
        document.getElementById(`modal-${id}`).style.display = "flex";
    }

    function closeModal(id) {
        const selected = document.querySelector(`input[name="${id}"]:checked`);
        if (selected) {
            userAnswers[id] = selected.value;
            document.getElementById(`status-${id}`).textContent = "‚úì";
            document.getElementById(`status-${id}`).style.color = "green";
        }
        document.getElementById(`modal-${id}`).style.display = "none";
    }

    function checkAll() {
        const resultEl = document.getElementById("result");
        const allAnswered = Object.values(userAnswers).every(ans => ans !== null);

        if (!allAnswered) {
            resultEl.textContent = "–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤—Å–µ.";
            return;
        }

        let correctCount = 0;
        for (const id in correctAnswers) {
            if (userAnswers[id] === correctAnswers[id]) correctCount++;
        }

        if (correctCount === 4) {
            resultEl.innerHTML = `
                ‚úÖ <strong>–í—Å–µ –≤–µ—Ä–Ω–æ!</strong><br>
                –í—ã –æ—Ç–ª–∏—á–Ω–æ —É—Å–≤–æ–∏–ª–∏ –£—Ä–æ–∫ 5:<br>
                ‚Ä¢ –ò–Ω–≤–µ—Ä—Å–∏—è –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏—è –≤ –æ—Ç—Ä–∏—Ü–∞–Ω–∏–∏ (‰∏çÊàëÈôçÁÜØ)<br>
                ‚Ä¢ –î–≤–æ–π–Ω–æ–µ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ (Âèó‰Ωë)<br>
                ‚Ä¢ –§—É–Ω–∫—Ü–∏–∏ –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏–π (‰Ωô ‚Äî –ø–æ–¥–ª–µ–∂–∞—â–µ–µ, Êúï ‚Äî –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ)<br>
                ‚Ä¢ –ë–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ (Â∏ù)
            `;
            sendResult(true);
        } else {
            const wrong = 4 - correctCount;
            resultEl.textContent = `‚ùå ${wrong} –æ—à–∏–±–∫–∏.`;
            sendResult(false, `–û—à–∏–±–∫–∏: ${wrong}/4`);
        }
    }

    function sendResult(success, message) {
        window.parent.postMessage({ type: "TASK_RESULT", success, message }, "*");
    }

    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
</script>
</body>
</html>

=== üìÑ task15.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <title>–°–æ–±–µ—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥: –£—Ä–æ–∫ 5</title>
</head>
<body>

<h2>–°–æ–±–µ—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥: –£—Ä–æ–∫ 5</h2>

<div class="instructions">
    <p><strong>–ö–ª–∏–∫–∞–π—Ç–µ –ø–æ —Å–ª–æ–≤–∞–º</strong>, —á—Ç–æ–±—ã —Å–æ–±—Ä–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥.</p>
    <p>–ö–∞–∂–¥–æ–µ –∑–∞–¥–∞–Ω–∏–µ —Ñ–æ–∫—É—Å–∏—Ä—É–µ—Ç—Å—è –Ω–∞ –∫–ª—é—á–µ–≤—ã—Ö –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä–∞—Ö –£—Ä–æ–∫–∞ 5.</p>
    <p>üí° <em>–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –∏–Ω–≤–µ—Ä—Å–∏—é, –¥–≤–æ–π–Ω–æ–µ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∏ —Ñ—É–Ω–∫—Ü–∏–∏ –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏–π!</em></p>
</div>

<div class="task-container">
    <div class="task-title">1. Â∏ù‰∏çÊàëÈôçÁÜØ</div>
    <div class="oracle-text">Â∏ù‰∏çÊàëÈôçÁÜØ</div>
    <div id="word-pool1" class="word-pool"></div>
    <div id="drop-area1" class="drop-area"></div>
    <div class="instructions" style="font-size:12px; padding:4px; margin-top:4px">
        <p>üí° –ó–¥–µ—Å—å –≤–∞–∂–Ω–æ: <strong>–∏–Ω–≤–µ—Ä—Å–∏—è ¬´Êàë¬ª</strong> –ø–µ—Ä–µ–¥ –≥–ª–∞–≥–æ–ª–æ–º –≤ –æ—Ç—Ä–∏—Ü–∞–Ω–∏–∏</p>
    </div>
</div>

<div class="task-container">
    <div class="task-title">2. Â∏ùÂèóÊàë‰Ωë</div>
    <div class="oracle-text">Â∏ùÂèóÊàë‰Ωë</div>
    <div id="word-pool2" class="word-pool"></div>
    <div id="drop-area2" class="drop-area"></div>
    <div class="instructions" style="font-size:12px; padding:4px; margin-top:4px">
        <p>üí° –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ: <strong>–¥–≤–æ–π–Ω–æ–µ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ</strong> ‚Äî –∫–æ–º—É? —á—Ç–æ?</p>
    </div>
</div>

<div class="task-container">
    <div class="task-title">3. ‰ΩôÂÖ∂ÂæóÊ±ù</div>
    <div class="oracle-text">‰ΩôÂÖ∂ÂæóÊ±ù</div>
    <div id="word-pool3" class="word-pool"></div>
    <div id="drop-area3" class="drop-area"></div>
    <div class="instructions" style="font-size:12px; padding:4px; margin-top:4px">
        <p>üí° –ü–æ–º–Ω–∏—Ç–µ: <strong>„Äå‰Ωô„Äç</strong> ‚Äî 1-–µ –ª–∏—Ü–æ, –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–¥–ª–µ–∂–∞—â–∏–º –∏ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ–º</p>
    </div>
</div>

<div class="task-container">
    <div class="task-title">4. Êúï‰Ωø</div>
    <div class="oracle-text">Êúï‰Ωø</div>
    <div id="word-pool4" class="word-pool"></div>
    <div id="drop-area4" class="drop-area"></div>
    <div class="instructions" style="font-size:12px; padding:4px; margin-top:4px">
        <p>üí° –í–∞–∂–Ω–æ: <strong>„ÄåÊúï„Äç</strong> —É–ø–æ—Ç—Ä–µ–±–ª—è–µ—Ç—Å—è –¢–û–õ–¨–ö–û –∫–∞–∫ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ</p>
    </div>
</div>

<div class="controls">
    <button id="check-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
    <button id="reset-btn">–°–±—Ä–æ—Å–∏—Ç—å</button>
</div>

<p id="result"></p>

<script>
// –û–∂–∏–¥–∞–µ–º—ã–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
const expected1 = [
    ['–ù–µ–±–µ—Å–Ω—ã–π –í–ª–∞–¥—ã–∫–∞', '–Ω–µ', '–ø–æ—Å–ª–∞–ª', '–Ω–∞–º', '–∑–∞—Å—É—Ö—É'],
    ['–ù–µ–±–µ—Å–Ω—ã–π –í–ª–∞–¥—ã–∫–∞', '–Ω–µ', '–ø–æ—Å–ª–∞–ª', '–∑–∞—Å—É—Ö—É', '–Ω–∞–º'],
    ['–Ω–µ', '–ø–æ—Å–ª–∞–ª', '–Ω–∞–º', '–∑–∞—Å—É—Ö—É', '–ù–µ–±–µ—Å–Ω—ã–π –í–ª–∞–¥—ã–∫–∞']
];

const expected2 = [
    ['–ù–µ–±–µ—Å–Ω—ã–π –í–ª–∞–¥—ã–∫–∞', '–ø–æ—à–ª—ë—Ç', '–Ω–∞–º', '–ø–æ–º–æ—â—å'],
    ['–ù–µ–±–µ—Å–Ω—ã–π –í–ª–∞–¥—ã–∫–∞', '–Ω–∏—Å–ø–æ—à–ª—ë—Ç', '–Ω–∞–º', '–ø–æ–º–æ—â—å'],
    ['–Ω–∞–º', '–ø–æ–º–æ—â—å', '–ø–æ—à–ª—ë—Ç', '–ù–µ–±–µ—Å–Ω—ã–π –í–ª–∞–¥—ã–∫–∞']
];

const expected3 = [
    ['–Ø', '–ø–æ–ª—É—á—É', '—Ç–µ–±—è'],
    ['—Ç—ã', '–±—É–¥–µ—à—å', '–ø–æ–ª—É—á–µ–Ω', '–º–Ω–æ–π'],
    ['–Ø', '–ø–æ–ª—É—á—É', '—Ç–≤–æ—é', '–ø–æ–º–æ—â—å']
];

const expected4 = [
    ['–º–æ–π', '–ø–æ—Å–ª–∞–Ω–Ω–∏–∫'],
    ['–º–æ–π', '–µ–º–∏—Å—Å–∞—Ä'],
    ['–ø–æ—Å–ª–∞–Ω–Ω–∏–∫', '–º–æ–π']
];

// –°–ª–æ–≤–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ (—Å –ª–∏—à–Ω–∏–º–∏)
const words1 = ['–ù–µ–±–µ—Å–Ω—ã–π –í–ª–∞–¥—ã–∫–∞', '–Ω–µ', '–ø–æ—Å–ª–∞–ª', '–Ω–∞–º', '–∑–∞—Å—É—Ö—É', '–∏—Ö', '–µ–º—É', '–æ–Ω', '–ø–æ—Å–ª–∞–ª', '–¥–æ–∂–¥—å', '–≤—á–µ—Ä–∞'];
const words2 = ['–ù–µ–±–µ—Å–Ω—ã–π –í–ª–∞–¥—ã–∫–∞', '–ø–æ—à–ª—ë—Ç', '–Ω–∞–º', '–ø–æ–º–æ—â—å', '–∏–º', '—É—Ä–æ–∂–∞–π', '–≤–ª–∞—Å—Ç—å', '–º–∏—Ä', '–ø–æ–º–æ—â—å', '–ø–æ—Å–ª–∞–ª', '–≤—á–µ—Ä–∞'];
const words3 = ['–Ø', '–ø–æ–ª—É—á—É', '—Ç–µ–±—è', '–µ–≥–æ', '–≤–∞—Å', '–≤–ª–∞—Å—Ç—å', '–ø–æ–º–æ—â—å', '–º—ã', '—Ç—ã', '–æ–Ω', '–ø–æ–ª—É—á–∏–ª', '–º–µ–Ω—è'];
const words4 = ['–º–æ–π', '–ø–æ—Å–ª–∞–Ω–Ω–∏–∫', '—Ç–≤–æ–π', '–µ–º–∏—Å—Å–∞—Ä', '–æ–Ω', '–µ–º—É', '–Ω–∞—à', '–æ–Ω–∏', '–≥–æ—Å—Ç—å', '–≤–æ–∏–Ω', '—Å–ª—É–≥–∞'];

// DOM-—ç–ª–µ–º–µ–Ω—Ç—ã
const wordPool1 = document.getElementById('word-pool1');
const wordPool2 = document.getElementById('word-pool2');
const wordPool3 = document.getElementById('word-pool3');
const wordPool4 = document.getElementById('word-pool4');
const dropArea1 = document.getElementById('drop-area1');
const dropArea2 = document.getElementById('drop-area2');
const dropArea3 = document.getElementById('drop-area3');
const dropArea4 = document.getElementById('drop-area4');
const checkBtn = document.getElementById('check-btn');
const resetBtn = document.getElementById('reset-btn');
const resultEl = document.getElementById('result');

function shuffleArray(array) {
    const arr = [...array];
    for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
    }
    return arr;
}

function createWordElements(words, pool, dropArea) {
    const shuffledWords = shuffleArray(words);
    return shuffledWords.map(word => {
        const box = document.createElement('div');
        box.className = 'word-box';
        box.textContent = word;

        box.onclick = () => {
            box.remove();
            dropArea.appendChild(box);
            updatePlaceholder(dropArea);
        };

        return box;
    });
}

function updatePlaceholder(dropArea) {
    const hasWords = Array.from(dropArea.children).some(el => el.classList.contains('word-box'));
    dropArea.classList.toggle('has-words', hasWords);
}

let wordElements1 = [];
let wordElements2 = [];
let wordElements3 = [];
let wordElements4 = [];

function init() {
    // –û—á–∏—Å—Ç–∫–∞
    [wordPool1, wordPool2, wordPool3, wordPool4].forEach(p => p.innerHTML = '');
    [dropArea1, dropArea2, dropArea3, dropArea4].forEach(d => d.innerHTML = '');
    resultEl.style.display = 'none';

    // –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    wordElements1 = createWordElements(words1, wordPool1, dropArea1);
    wordElements2 = createWordElements(words2, wordPool2, dropArea2);
    wordElements3 = createWordElements(words3, wordPool3, dropArea3);
    wordElements4 = createWordElements(words4, wordPool4, dropArea4);

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –ø—É–ª—ã
    wordElements1.forEach(el => wordPool1.appendChild(el));
    wordElements2.forEach(el => wordPool2.appendChild(el));
    wordElements3.forEach(el => wordPool3.appendChild(el));
    wordElements4.forEach(el => wordPool4.appendChild(el));

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤
    [dropArea1, dropArea2, dropArea3, dropArea4].forEach(updatePlaceholder);
}

// –í–æ–∑–≤—Ä–∞—Ç —Å–ª–æ–≤ –≤ –ø—É–ª –ø—Ä–∏ –∫–ª–∏–∫–µ
[dropArea1, dropArea2, dropArea3, dropArea4].forEach((area, i) => {
    area.addEventListener('click', (e) => {
        if (e.target.classList.contains('word-box')) {
            const box = e.target;
            box.remove();
            [wordPool1, wordPool2, wordPool3, wordPool4][i].appendChild(box);
            updatePlaceholder(area);
        }
    });
});

function getWords(dropArea) {
    return Array.from(dropArea.children)
        .filter(el => el.classList.contains('word-box'))
        .map(el => el.textContent.trim());
}

function arraysEqual(a, b) {
    if (a.length !== b.length) return false;
    return a.every((val, i) => val === b[i]);
}

checkBtn.addEventListener('click', () => {
    const current1 = getWords(dropArea1);
    const current2 = getWords(dropArea2);
    const current3 = getWords(dropArea3);
    const current4 = getWords(dropArea4);

    const isCorrect1 = expected1.some(option => arraysEqual(current1, option));
    const isCorrect2 = expected2.some(option => arraysEqual(current2, option));
    const isCorrect3 = expected3.some(option => arraysEqual(current3, option));
    const isCorrect4 = expected4.some(option => arraysEqual(current4, option));

    if (isCorrect1 && isCorrect2 && isCorrect3 && isCorrect4) {
        resultEl.innerHTML = `
            ‚úÖ <b>–ò–¥–µ–∞–ª—å–Ω–æ!</b> –í—ã —É—Å–≤–æ–∏–ª–∏ –∫–ª—é—á–µ–≤—ã–µ —Ç–µ–º—ã –£—Ä–æ–∫–∞ 5:<br>
            ‚Ä¢ <strong>–ò–Ω–≤–µ—Ä—Å–∏—è –≤ –æ—Ç—Ä–∏—Ü–∞–Ω–∏–∏</strong> (‰∏çÊàëÈôçÁÜØ)<br>
            ‚Ä¢ <strong>–î–≤–æ–π–Ω–æ–µ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ</strong> (ÂèóÊàë‰Ωë)<br>
            ‚Ä¢ <strong>–§—É–Ω–∫—Ü–∏–∏ –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏–π</strong> (‰Ωô, Êúï)<br>
            ‚Ä¢ <strong>–ë–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ</strong> (Â∏ù)
        `;
        resultEl.className = 'message success';
        resultEl.style.display = 'block';
        sendResult(true);
    } else {
        let message = '‚ùå –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—Ä—è–¥–æ–∫ —Å–ª–æ–≤ –∏ –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:';
        if (!isCorrect1) message += '<br>‚Ä¢ –ò–Ω–≤–µ—Ä—Å–∏—è ¬´Êàë¬ª –≤ –æ—Ç—Ä–∏—Ü–∞–Ω–∏–∏: ¬´–Ω–µ –ø–æ—à–ª—ë—Ç –Ω–∞–º¬ª';
        if (!isCorrect2) message += '<br>‚Ä¢ –î–≤–æ–π–Ω–æ–µ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ: ¬´–Ω–∞–º –ø–æ–º–æ—â—å¬ª';
        if (!isCorrect3) message += '<br>‚Ä¢ –ú–µ—Å—Ç–æ–∏–º–µ–Ω–∏–µ ¬´‰Ωô¬ª ‚Äî 1-–µ –ª–∏—Ü–æ, –ø–æ–¥–ª–µ–∂–∞—â–µ–µ';
        if (!isCorrect4) message += '<br>‚Ä¢ ¬´Êúï¬ª ‚Äî —Ç–æ–ª—å–∫–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ, –Ω–µ –ø–æ–¥–ª–µ–∂–∞—â–µ–µ';

        resultEl.innerHTML = message;
        resultEl.className = 'message error';
        resultEl.style.display = 'block';
        sendResult(false, message);
    }
});

resetBtn.addEventListener('click', init);

function sendResult(success, message) {
    window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
    }, "*");
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
window.onload = init;
window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
</script>
</body>
</html>

=== üìÑ task16.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <title>–ò–Ω–≤–µ—Ä—Å–∏—è vs –ü—Ä—è–º–æ–π –ø–æ—Ä—è–¥–æ–∫: –£—Ä–æ–∫ 5</title>
</head>
<body>

<h2>–ò–Ω–≤–µ—Ä—Å–∏—è vs –ü—Ä—è–º–æ–π –ø–æ—Ä—è–¥–æ–∫</h2>

<div class="instructions">
    <div class="instructions-header" onclick="toggleInstructions()">
        <strong>üìå –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è (–Ω–∞–∂–º–∏ –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è)</strong>
        <span class="arrow">‚ñº</span>
    </div>
    <div class="instructions-content" style="display:none">
        <p><strong>–ò–Ω–≤–µ—Ä—Å–∏—è –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –∞—Ä—Ö–∞–∏—á–µ—Å–∫–æ–º –∫–∏—Ç–∞–π—Å–∫–æ–º</strong></p>
        <p>–í –∞—Ä—Ö–∞–∏—á–µ—Å–∫–æ–º –¥—Ä–µ–≤–Ω–µ–∫–∏—Ç–∞–π—Å–∫–æ–º —è–∑—ã–∫–µ –±–µ—Å–ø—Ä–µ–¥–ª–æ–∂–Ω—ã–µ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è (–æ—Å–æ–±–µ–Ω–Ω–æ –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏—è) –º–æ–≥—É—Ç —Å—Ç–æ—è—Ç—å –ø–µ—Ä–µ–¥ –≥–ª–∞–≥–æ–ª–æ–º ‚Äî —ç—Ç–æ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è <strong>–∏–Ω–≤–µ—Ä—Å–∏–µ–π</strong>.</p>

        <p>üü¢ <strong>–ü—Ä—è–º–æ–π –ø–æ—Ä—è–¥–æ–∫</strong> (–∑–µ–ª–µ–Ω—ã–π):</p>
        <ul>
            <li>–î–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ç–æ–∏—Ç –ø–æ—Å–ª–µ –≥–ª–∞–≥–æ–ª–∞: ¬´ÂèóÊàë‰Ωë¬ª ‚Äî ¬´–ø–æ—Å–ª–∞—Ç—å –Ω–∞–º –ø–æ–º–æ—â—å¬ª</li>
            <li>–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —É—Ç–≤–µ—Ä–¥–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö</li>
        </ul>

        <p>üî¥ <strong>–ò–Ω–≤–µ—Ä—Å–∏—è</strong> (–∫—Ä–∞—Å–Ω—ã–π):</p>
        <ul>
            <li>–î–æ–ø–æ–ª–Ω–µ–Ω–∏–µ (—á–∞—â–µ –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏–µ) —Å—Ç–æ–∏—Ç <strong>–ø–µ—Ä–µ–¥</strong> –≥–ª–∞–≥–æ–ª–æ–º: ¬´‰∏çÊàëÂèó‰Ωë¬ª ‚Äî ¬´–Ω–µ –ø–æ—à–ª—ë—Ç –Ω–∞–º –ø–æ–º–æ—â–∏¬ª</li>
            <li>–û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞ –≤ <strong>–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö</strong> —Å –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏–µ–º-–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ–º</li>
            <li>–¢–æ–ª—å–∫–æ —Å –æ—Ç—Ä–∏—Ü–∞–Ω–∏–µ–º <strong>‰∏ç</strong>, –∞ –Ω–µ Âºó</li>
        </ul>

        <p><em>–ü—Ä–∏–º–µ—Ä—ã:</em><br>
        "Â∏ùÂèóÊàë‰Ωë" ‚Üí üü¢ (–ø—Ä—è–º–æ–π –ø–æ—Ä—è–¥–æ–∫)<br>
        "Â∏ù‰∏çÊàëÂèó‰Ωë" ‚Üí üî¥ (–∏–Ω–≤–µ—Ä—Å–∏—è)</p>

        <p><strong>–í–∞–∂–Ω–æ!</strong><br>
        –ò–Ω–≤–µ—Ä—Å–∏—è <strong>–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞</strong>, –µ—Å–ª–∏:
        <ol>
            <li>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ</li>
            <li>–î–æ–ø–æ–ª–Ω–µ–Ω–∏–µ ‚Äî –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏–µ</li>
            <li>–ì–ª–∞–≥–æ–ª —Ç—Ä–µ–±—É–µ—Ç –¥–≤–æ–π–Ω–æ–≥–æ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è (Âèó, Èôç, ‰Ωú –∏ –¥—Ä.)</li>
        </ol>
        –ù–∞—Ä—É—à–µ–Ω–∏–µ —ç—Ç–æ–≥–æ –ø—Ä–∞–≤–∏–ª–∞ ‚Äî –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞.</p>
    </div>
</div>

<script>
function toggleInstructions() {
    const content = document.querySelector('.instructions-content');
    const header = document.querySelector('.instructions-header');
    const arrow = header.querySelector('.arrow');
    const isHidden = content.style.display === 'none';

    content.style.display = isHidden ? 'block' : 'none';
    arrow.textContent = isHidden ? '‚ñ≤' : '‚ñº';

    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–æ–¥–∏—Ç–µ–ª—è –æ –Ω–æ–≤–æ–π –≤—ã—Å–æ—Ç–µ
    setTimeout(() => {
        window.parent.postMessage({
            type: "UPDATE_HEIGHT",
            height: document.body.scrollHeight
        }, "*");
    }, 100);
}
</script>

<div class="columns">
    <div id="column1" class="column"></div>
    <div id="column2" class="column"></div>
</div>

<div class="controls">
    <button id="check-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
    <button id="reset-btn">–°–±—Ä–æ—Å–∏—Ç—å</button>
</div>

<p id="result"></p>

<script>
const sentences = [
    { text: "Â∏ùÂèóÊàë‰Ωë", type: "direct", explanation: "–ù–µ–±–µ—Å–Ω—ã–π –í–ª–∞–¥—ã–∫–∞ –ø–æ—à–ª—ë—Ç –Ω–∞–º –ø–æ–º–æ—â—å ‚Äî –ø—Ä—è–º–æ–π –ø–æ—Ä—è–¥–æ–∫, —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ" },
    { text: "Â∏ù‰∏çÊàëÂèó‰Ωë", type: "inversion", explanation: "–ù–µ–±–µ—Å–Ω—ã–π –í–ª–∞–¥—ã–∫–∞ –Ω–µ –ø–æ—à–ª—ë—Ç –Ω–∞–º –ø–æ–º–æ—â–∏ ‚Äî –∏–Ω–≤–µ—Ä—Å–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞ –≤ –æ—Ç—Ä–∏—Ü–∞–Ω–∏–∏ —Å –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏–µ–º" },
    { text: "Â∏ùÈôçÊàëÁÜØ", type: "direct", explanation: "–ù–µ–±–µ—Å–Ω—ã–π –í–ª–∞–¥—ã–∫–∞ –ø–æ—à–ª—ë—Ç –Ω–∞–º –∑–∞—Å—É—Ö—É ‚Äî –ø—Ä—è–º–æ–π –ø–æ—Ä—è–¥–æ–∫, —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ" },
    { text: "Â∏ù‰∏çÊàëÈôçÁÜØ", type: "inversion", explanation: "–ù–µ–±–µ—Å–Ω—ã–π –í–ª–∞–¥—ã–∫–∞ –Ω–µ –ø–æ—à–ª—ë—Ç –Ω–∞–º –∑–∞—Å—É—Ö—É ‚Äî –∏–Ω–≤–µ—Ä—Å–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞" },
    { text: "Ê¥π‰ΩúÂÖπÈÇëÁ•∏", type: "direct", explanation: "–†–µ–∫–∞ –•—É–∞–Ω—å –Ω–∞–Ω–µ—Å—ë—Ç –Ω–µ—Å—á–∞—Å—Ç—å–µ —ç—Ç–æ–º—É –≥–æ—Ä–æ–¥—É ‚Äî –ø—Ä—è–º–æ–π –ø–æ—Ä—è–¥–æ–∫" },
    { text: "Ê¥πÂºó‰ΩúÂÖπÈÇëÁ•∏", type: "direct", explanation: "–†–µ–∫–∞ –•—É–∞–Ω—å –Ω–µ –Ω–∞–Ω–µ—Å—ë—Ç –Ω–µ—Å—á–∞—Å—Ç—å–µ —ç—Ç–æ–º—É –≥–æ—Ä–æ–¥—É ‚Äî –∑–¥–µ—Å—å Âºó, –Ω–æ –Ω–µ—Ç –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏—è, –∏–Ω–≤–µ—Ä—Å–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è" },
    { text: "Â∏ù‰∏çÊàëÂÖ∂Âèó‰Ωë", type: "inversion", explanation: "–ù–µ–±–µ—Å–Ω—ã–π –í–ª–∞–¥—ã–∫–∞ –Ω–µ –ø–æ—à–ª—ë—Ç –ª–∏ –Ω–∞–º –ø–æ–º–æ—â–∏? ‚Äî –∏–Ω–≤–µ—Ä—Å–∏—è —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –¥–∞–∂–µ —Å —á–∞—Å—Ç–∏—Ü–µ–π ÂÖ∂" },
    { text: "‰ΩôÂÖ∂ÂæóÊ±ù", type: "direct", explanation: "–Ø –ø–æ–ª—É—á—É —Ç–µ–±—è ‚Äî –ø—Ä—è–º–æ–π –ø–æ—Ä—è–¥–æ–∫, —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ, –Ω–µ—Ç –æ—Ç—Ä–∏—Ü–∞–Ω–∏—è" },
    { text: "‰Ωô‰∏çÂÖ∂ÂæóÊ±ù", type: "inversion", explanation: "–Ø –Ω–µ –ø–æ–ª—É—á—É –ª–∏ —Ç–µ–±—è? ‚Äî –æ—Ç—Ä–∏—Ü–∞–Ω–∏–µ + –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏–µ ‚Üí –∏–Ω–≤–µ—Ä—Å–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞" },
    { text: "Êúï‰Ωø", type: "direct", explanation: "–º–æ–π –ø–æ—Å–ª–∞–Ω–Ω–∏–∫ ‚Äî –∑–¥–µ—Å—å Êúï –≤ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è, –Ω–µ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ" }
];

function shuffleArray(array) {
    const arr = [...array];
    for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
    }
    return arr;
}

function createSentenceElement(sentence, index) {
    const item = document.createElement('div');
    item.className = 'sentence-item';
    item.dataset.index = index;

    item.innerHTML = `
        <div class="oracle-text">${sentence.text}</div>
        <div class="toggle-container">
            <span class="toggle-text">–ø—Ä—è–º–æ–π</span>
            <label class="toggle-switch">
                <input type="checkbox">
                <span class="slider"></span>
            </label>
            <span class="toggle-text">–∏–Ω–≤–µ—Ä—Å–∏—è</span>
        </div>
    `;

    return item;
}

function init() {
    const shuffled = shuffleArray([...sentences]);
    const column1 = document.getElementById('column1');
    const column2 = document.getElementById('column2');

    column1.innerHTML = '';
    column2.innerHTML = '';
    document.getElementById('result').style.display = 'none';

    document.querySelectorAll('.sentence-item').forEach(el => el.remove());

    shuffled.slice(0, 5).forEach((s, i) => {
        const el = createSentenceElement(s, i);
        column1.appendChild(el);
    });

    shuffled.slice(5).forEach((s, i) => {
        const el = createSentenceElement(s, i + 5);
        column2.appendChild(el);
    });
}

function checkAnswers() {
    const items = document.querySelectorAll('.sentence-item');
    let allCorrect = true;

    items.forEach(item => {
        const index = item.dataset.index;
        const input = item.querySelector('input');
        const expectedType = sentences[index].type;
        const isCorrect = (input.checked && expectedType === "inversion") ||
                          (!input.checked && expectedType === "direct");

        item.classList.remove('correct', 'incorrect');
        if (isCorrect) {
            item.classList.add('correct');
        } else {
            item.classList.add('incorrect');
            allCorrect = false;
        }
    });

    const resultEl = document.getElementById('result');
    if (allCorrect) {
        resultEl.innerHTML = `
            ‚úÖ <b>–û—Ç–ª–∏—á–Ω–æ!</b> –í—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏ –≤—Å–µ —Å–ª—É—á–∞–∏ –∏–Ω–≤–µ—Ä—Å–∏–∏.<br>
            <small>–í—ã —É—Å–≤–æ–∏–ª–∏: –∏–Ω–≤–µ—Ä—Å–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞ –≤ –æ—Ç—Ä–∏—Ü–∞–Ω–∏—è—Ö —Å –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏–µ–º, –¥–∞–∂–µ —Å —á–∞—Å—Ç–∏—Ü–µ–π ÂÖ∂, –∏ —Ç–æ–ª—å–∫–æ —Å ‰∏ç.</small>
        `;
        resultEl.className = 'success';
        sendResult(true);
    } else {
        resultEl.innerHTML = `‚ùå <b>–û—à–∏–±–∫–∞</b> –≤ –æ–¥–Ω–æ–º –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è—Ö.`;
        resultEl.className = 'error';
        sendResult(false);
    }
    resultEl.style.display = 'block';
}

function reset() {
    document.querySelectorAll('.toggle-switch input').forEach(input => {
        input.checked = false;
    });
    document.querySelectorAll('.sentence-item').forEach(item => {
        item.classList.remove('correct', 'incorrect');
    });
    document.getElementById('result').style.display = 'none';
}

function sendResult(success) {
    window.parent.postMessage({
        type: "TASK_RESULT",
        success: success,
        message: success ? "–í–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞"
    }, "*");
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
window.onload = init;
window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");

document.getElementById('check-btn').addEventListener('click', checkAnswers);
document.getElementById('reset-btn').addEventListener('click', reset);
</script>
</body>
</html>

=== üìÑ task17.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ: –£—Ä–æ–∫ 5</title>
</head>
<body>
  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ –∑–Ω–∞—á–µ–Ω–∏–µ</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∞</p>
  
  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–ó–Ω–∞—á–µ–Ω–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>

  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    // –°–ª–æ–≤–∞—Ä—å –£—Ä–æ–∫–∞ 5 ‚Äî –∫–ª—é—á–µ–≤—ã–µ –ª–µ–∫—Å–µ–º—ã —Å –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ –∏ –∫—É–ª—å—Ç—É—Ä–Ω—ã–º–∏ –ø–æ—è—Å–Ω–µ–Ω–∏—è–º–∏
// –ü–µ—Ä–≤–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs1 = [
  { char: "Â∏ù", meaning: "–ù–µ–±–µ—Å–Ω—ã–π –í–ª–∞–¥—ã–∫–∞ ‚Äî –≤—ã—Å—à–µ–µ –±–æ–∂–µ—Å—Ç–≤–æ, –æ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ –∑–∞–≤–∏—Å—è—Ç —É—Ä–æ–∂–∞–π, –ø–æ–±–µ–¥–∞ –∏ –ø—Ä–∏—Ä–æ–¥–Ω—ã–µ —è–≤–ª–µ–Ω–∏—è" },
  { char: "ÁÜØ", meaning: "–∏—Å—Å—É—à–∏—Ç—å, –≤—ã–∑–≤–∞—Ç—å –∑–∞—Å—É—Ö—É ‚Äî –ø—Ä–∏—Ä–æ–¥–Ω–æ–µ –±–µ–¥—Å—Ç–≤–∏–µ, –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ—Å—Ç—å –¥–æ–∂–¥—é" },
  { char: "Áî≥", meaning: "–∑–∞—è—Ü (–∑–µ–º–Ω–∞—è –≤–µ—Ç–≤—å); —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç –æ–∑–Ω–∞—á–∞—Ç—å '–∑–∞—è–≤–ª—è—Ç—å, –æ–±—ä—è–≤–ª—è—Ç—å'" },
  { char: "Èôç", meaning: "–ø–æ—Å–ª–∞—Ç—å (—Å–≤–µ—Ä—Ö—É –≤–Ω–∏–∑) ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å –±–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, ¬´–ø–æ—Å–ª–∞—Ç—å –ø–æ–º–æ—â—å¬ª –∏–ª–∏ ¬´–ø–æ—Å–ª–∞—Ç—å –∑–∞—Å—É—Ö—É¬ª" },
  { char: "‰ºê", meaning: "–Ω–∞–Ω–µ—Å—Ç–∏ —É–¥–∞—Ä, –Ω–∞–ø–∞—Å—Ç—å ‚Äî –≤–æ–µ–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ, —á–∞—Å—Ç–æ —Å–æ–≤–µ—Ä—à–∞–µ—Ç—Å—è —Å –±–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è" }
];

// –í—Ç–æ—Ä–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs2 = [
  { char: "‰Ωë", meaning: "–ø–æ–º–æ—â—å, –ø–æ–∫—Ä–æ–≤–∏—Ç–µ–ª—å—Å—Ç–≤–æ ‚Äî –æ–±—ã—á–Ω–æ –æ—Ç –ù–µ–±–µ—Å–Ω–æ–≥–æ –í–ª–∞–¥—ã–∫–∏; –≤ –≥–ª–∞–≥–æ–ª—å–Ω–æ–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ ¬´Âèó‰Ωë¬ª ‚Äî ¬´–ø–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å¬ª" },
  { char: "Ê¥π", meaning: "—Ä–µ–∫–∞ –•—É–∞–Ω—å ‚Äî –ø—Ä–∏—Ç–æ–∫ –•—É–∞–Ω—Ö—ç, —É–≥—Ä–æ–∂–∞–≤—à–∞—è –Ω–∞–≤–æ–¥–Ω–µ–Ω–∏—è–º–∏ —Å—Ç–æ–ª–∏—Ü–µ –®–∞–Ω" },
  { char: "‰Ωú", meaning: "–Ω–∞–Ω–µ—Å—Ç–∏, –ø—Ä–∏—á–∏–Ω–∏—Ç—å (–≤—Ä–µ–¥) ‚Äî —á–∞—Å—Ç–æ —Å ¬´Á•∏¬ª: ¬´‰ΩúÁ•∏¬ª = ¬´–Ω–∞–≤—Ä–µ–¥–∏—Ç—å, –ø—Ä–∏–Ω–µ—Å—Ç–∏ –Ω–µ—Å—á–∞—Å—Ç—å–µ¬ª" },
  { char: "Ëå≤", meaning: "—ç—Ç–æ—Ç, –∑–¥–µ—Å—å ‚Äî —É–∫–∞–∑–∞—Ç–µ–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏–µ –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ –∏ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞, —Å–∏–Ω–æ–Ω–∏–º ¬´‰ªä¬ª" },
  { char: "Á¶ç", meaning: "–±–µ–¥—Å—Ç–≤–∏–µ, –Ω–µ—Å—á–∞—Å—Ç—å–µ ‚Äî –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω–æ —Ä–µ–∫–æ–π, –ø–ª–µ–º–µ–Ω–∞–º–∏ –∏–ª–∏ –±–æ–∂–µ—Å—Ç–≤–æ–º" }
];

// –¢—Ä–µ—Ç—å—è –ø—è—Ç–µ—Ä–∫–∞
const pairs3 = [
  { char: "‰Ωô", meaning: "—è (1-–µ –ª–∏—Ü–æ) ‚Äî –ø–æ–¥–ª–µ–∂–∞—â–µ–µ –∏–ª–∏ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ; –º–æ–∂–µ—Ç –æ–∑–Ω–∞—á–∞—Ç—å –∏ '–º—ã'" },
  { char: "Âæó", meaning: "–ø–æ–ª—É—á–∏—Ç—å, –æ–±—Ä–µ—Å—Ç–∏ ‚Äî —á–∞—Å—Ç–æ –≤ –∑–Ω–∞—á–µ–Ω–∏–∏ '—É–¥–∞—Å—Ç—Å—è –ª–∏ –ø–æ–ª—É—á–∏—Ç—å'" },
  { char: "Ê±ù", meaning: "—Ç—ã (2-–µ –ª–∏—Ü–æ) ‚Äî –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–¥–ª–µ–∂–∞—â–∏–º –∏–ª–∏ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ–º" },
  { char: "‰Ωø", meaning: "–ø–æ—Å–ª–∞–Ω–Ω–∏–∫, –ø–æ—Å–æ–ª ‚Äî —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ, –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–æ–µ –æ—Ç –≥–ª–∞–≥–æ–ª–∞ '–ø–æ—Å—ã–ª–∞—Ç—å'" },
  { char: "Âêà", meaning: "—Å–æ–±—Ä–∞—Ç—å, –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å (–≤–æ–∏–Ω–æ–≤) ‚Äî –≤–æ–µ–Ω–Ω–∞—è –º–æ–±–∏–ª–∏–∑–∞—Ü–∏—è" }
];

// –ß–µ—Ç–≤—ë—Ä—Ç–∞—è –ø—è—Ç–µ—Ä–∫–∞ (–Ω–µ–ø–æ–ª–Ω–∞—è)
const pairs4 = [
  { char: "‰πÉ", meaning: "—Ç–≤–æ–π (2-–µ –ª–∏—Ü–æ, —Ç–æ–ª—å–∫–æ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è!) ‚Äî –Ω–∞–ø—Ä–∏–º–µ—Ä, ¬´—Ç–≤–æ–π –ø–æ—Å–ª–∞–Ω–Ω–∏–∫¬ª" },
  { char: "‰ª•", meaning: "–ø—Ä–∏–≤–µ—Å—Ç–∏, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å (–ø–æ—Å–ª–∞–Ω–Ω–∏–∫–æ–≤) ‚Äî –≥–ª–∞–≥–æ–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è" },
  { char: "Áæå", meaning: "–ø–ª–µ–º—è –¶—è–Ω—å ‚Äî –æ–¥–Ω–æ –∏–∑ –≤—Ä–∞–∂–¥–µ–±–Ω—ã—Ö –ø–ª–µ–º—ë–Ω –Ω–∞ –∑–∞–ø–∞–¥–Ω—ã—Ö –≥—Ä–∞–Ω–∏—Ü–∞—Ö –®–∞–Ω" },
  { char: "Êúï", meaning: "–º–æ–π (—Ç–æ–ª—å–∫–æ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è!) ‚Äî –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–¥–ª–µ–∂–∞—â–∏–º, —Ç–æ–ª—å–∫–æ ¬´–º–æ–π –ø–æ—Å–ª–∞–Ω–Ω–∏–∫¬ª, ¬´–º–æ—è –ø–æ–º–æ—â—å¬ª –∏ —Ç.–¥." }
];

pairs = pairs1;

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");
      wordList.innerHTML = "";
      defList.innerHTML = "";
      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;

      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      el.classList.add("selected");
      const selectedMeaning = el.dataset.meaning;
      const selectedChar = selectedWord.dataset.char;

      // –ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –ø–∞—Ä—ã
      const correctPair = pairs.find(p => p.char === selectedChar);
      if (correctPair && correctPair.meaning === selectedMeaning) {
        // –í–µ—Ä–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        selectedWord.classList.add("matched");
        el.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 10) {
          const resultEl = document.getElementById("result");
          resultEl.innerHTML = `
            ‚úÖ <strong>–û—Ç–ª–∏—á–Ω–æ!</strong> –í—ã —É—Å–≤–æ–∏–ª–∏ –∫–ª—é—á–µ–≤—É—é –ª–µ–∫—Å–∏–∫—É –£—Ä–æ–∫–∞ 5:<br>
            ‚Ä¢ –ë–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ (<strong>Â∏ù</strong>)<br>
            ‚Ä¢ –ì–ª–∞–≥–æ–ª—ã ¬´–¥–∞—Ç—å/–Ω–∞–Ω–µ—Å—Ç–∏¬ª (<strong>Èôç</strong>, <strong>‰Ωú</strong>)<br>
            ‚Ä¢ –ú–µ—Å—Ç–æ–∏–º–µ–Ω–∏—è —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏ (<strong>Êúï</strong>, <strong>‰πÉ</strong>)<br>
            ‚Ä¢ –ü—Ä–∏—Ä–æ–¥–Ω—ã–µ —è–≤–ª–µ–Ω–∏—è (<strong>ÁÜØ</strong>, <strong>Á¶ç</strong>)
          `;
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        // –û—à–∏–±–∫–∞
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        el.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>


=== üìÑ task18.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ: –£—Ä–æ–∫ 5</title>
</head>
<body>
  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ –∑–Ω–∞—á–µ–Ω–∏–µ</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∞</p>
  
  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–ó–Ω–∞—á–µ–Ω–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>

  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    // –°–ª–æ–≤–∞—Ä—å –£—Ä–æ–∫–∞ 5 ‚Äî –∫–ª—é—á–µ–≤—ã–µ –ª–µ–∫—Å–µ–º—ã —Å –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ –∏ –∫—É–ª—å—Ç—É—Ä–Ω—ã–º–∏ –ø–æ—è—Å–Ω–µ–Ω–∏—è–º–∏
// –ü–µ—Ä–≤–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs1 = [
  { char: "Â∏ù", meaning: "–ù–µ–±–µ—Å–Ω—ã–π –í–ª–∞–¥—ã–∫–∞ ‚Äî –≤—ã—Å—à–µ–µ –±–æ–∂–µ—Å—Ç–≤–æ, –æ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ –∑–∞–≤–∏—Å—è—Ç —É—Ä–æ–∂–∞–π, –ø–æ–±–µ–¥–∞ –∏ –ø—Ä–∏—Ä–æ–¥–Ω—ã–µ —è–≤–ª–µ–Ω–∏—è" },
  { char: "ÁÜØ", meaning: "–∏—Å—Å—É—à–∏—Ç—å, –≤—ã–∑–≤–∞—Ç—å –∑–∞—Å—É—Ö—É ‚Äî –ø—Ä–∏—Ä–æ–¥–Ω–æ–µ –±–µ–¥—Å—Ç–≤–∏–µ, –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ—Å—Ç—å –¥–æ–∂–¥—é" },
  { char: "Áî≥", meaning: "–∑–∞—è—Ü (–∑–µ–º–Ω–∞—è –≤–µ—Ç–≤—å); —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç –æ–∑–Ω–∞—á–∞—Ç—å '–∑–∞—è–≤–ª—è—Ç—å, –æ–±—ä—è–≤–ª—è—Ç—å'" },
  { char: "Èôç", meaning: "–ø–æ—Å–ª–∞—Ç—å (—Å–≤–µ—Ä—Ö—É –≤–Ω–∏–∑) ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å –±–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, ¬´–ø–æ—Å–ª–∞—Ç—å –ø–æ–º–æ—â—å¬ª –∏–ª–∏ ¬´–ø–æ—Å–ª–∞—Ç—å –∑–∞—Å—É—Ö—É¬ª" },
  { char: "‰ºê", meaning: "–Ω–∞–Ω–µ—Å—Ç–∏ —É–¥–∞—Ä, –Ω–∞–ø–∞—Å—Ç—å ‚Äî –≤–æ–µ–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ, —á–∞—Å—Ç–æ —Å–æ–≤–µ—Ä—à–∞–µ—Ç—Å—è —Å –±–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è" }
];

// –í—Ç–æ—Ä–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs2 = [
  { char: "‰Ωë", meaning: "–ø–æ–º–æ—â—å, –ø–æ–∫—Ä–æ–≤–∏—Ç–µ–ª—å—Å—Ç–≤–æ ‚Äî –æ–±—ã—á–Ω–æ –æ—Ç –ù–µ–±–µ—Å–Ω–æ–≥–æ –í–ª–∞–¥—ã–∫–∏; –≤ –≥–ª–∞–≥–æ–ª—å–Ω–æ–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ ¬´Âèó‰Ωë¬ª ‚Äî ¬´–ø–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å¬ª" },
  { char: "Ê¥π", meaning: "—Ä–µ–∫–∞ –•—É–∞–Ω—å ‚Äî –ø—Ä–∏—Ç–æ–∫ –•—É–∞–Ω—Ö—ç, —É–≥—Ä–æ–∂–∞–≤—à–∞—è –Ω–∞–≤–æ–¥–Ω–µ–Ω–∏—è–º–∏ —Å—Ç–æ–ª–∏—Ü–µ –®–∞–Ω" },
  { char: "‰Ωú", meaning: "–Ω–∞–Ω–µ—Å—Ç–∏, –ø—Ä–∏—á–∏–Ω–∏—Ç—å (–≤—Ä–µ–¥) ‚Äî —á–∞—Å—Ç–æ —Å ¬´Á•∏¬ª: ¬´‰ΩúÁ•∏¬ª = ¬´–Ω–∞–≤—Ä–µ–¥–∏—Ç—å, –ø—Ä–∏–Ω–µ—Å—Ç–∏ –Ω–µ—Å—á–∞—Å—Ç—å–µ¬ª" },
  { char: "Ëå≤", meaning: "—ç—Ç–æ—Ç, –∑–¥–µ—Å—å ‚Äî —É–∫–∞–∑–∞—Ç–µ–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏–µ –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ –∏ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞, —Å–∏–Ω–æ–Ω–∏–º ¬´‰ªä¬ª" },
  { char: "Á¶ç", meaning: "–±–µ–¥—Å—Ç–≤–∏–µ, –Ω–µ—Å—á–∞—Å—Ç—å–µ ‚Äî –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω–æ —Ä–µ–∫–æ–π, –ø–ª–µ–º–µ–Ω–∞–º–∏ –∏–ª–∏ –±–æ–∂–µ—Å—Ç–≤–æ–º" }
];

// –¢—Ä–µ—Ç—å—è –ø—è—Ç–µ—Ä–∫–∞
const pairs3 = [
  { char: "‰Ωô", meaning: "—è (1-–µ –ª–∏—Ü–æ) ‚Äî –ø–æ–¥–ª–µ–∂–∞—â–µ–µ –∏–ª–∏ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ; –º–æ–∂–µ—Ç –æ–∑–Ω–∞—á–∞—Ç—å –∏ '–º—ã'" },
  { char: "Âæó", meaning: "–ø–æ–ª—É—á–∏—Ç—å, –æ–±—Ä–µ—Å—Ç–∏ ‚Äî —á–∞—Å—Ç–æ –≤ –∑–Ω–∞—á–µ–Ω–∏–∏ '—É–¥–∞—Å—Ç—Å—è –ª–∏ –ø–æ–ª—É—á–∏—Ç—å'" },
  { char: "Ê±ù", meaning: "—Ç—ã (2-–µ –ª–∏—Ü–æ) ‚Äî –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–¥–ª–µ–∂–∞—â–∏–º –∏–ª–∏ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ–º" },
  { char: "‰Ωø", meaning: "–ø–æ—Å–ª–∞–Ω–Ω–∏–∫, –ø–æ—Å–æ–ª ‚Äî —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ, –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–æ–µ –æ—Ç –≥–ª–∞–≥–æ–ª–∞ '–ø–æ—Å—ã–ª–∞—Ç—å'" },
  { char: "Âêà", meaning: "—Å–æ–±—Ä–∞—Ç—å, –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å (–≤–æ–∏–Ω–æ–≤) ‚Äî –≤–æ–µ–Ω–Ω–∞—è –º–æ–±–∏–ª–∏–∑–∞—Ü–∏—è" }
];

// –ß–µ—Ç–≤—ë—Ä—Ç–∞—è –ø—è—Ç–µ—Ä–∫–∞ (–Ω–µ–ø–æ–ª–Ω–∞—è)
const pairs4 = [
  { char: "‰πÉ", meaning: "—Ç–≤–æ–π (2-–µ –ª–∏—Ü–æ, —Ç–æ–ª—å–∫–æ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è!) ‚Äî –Ω–∞–ø—Ä–∏–º–µ—Ä, ¬´—Ç–≤–æ–π –ø–æ—Å–ª–∞–Ω–Ω–∏–∫¬ª" },
  { char: "‰ª•", meaning: "–ø—Ä–∏–≤–µ—Å—Ç–∏, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å (–ø–æ—Å–ª–∞–Ω–Ω–∏–∫–æ–≤) ‚Äî –≥–ª–∞–≥–æ–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è" },
  { char: "Áæå", meaning: "–ø–ª–µ–º—è –¶—è–Ω—å ‚Äî –æ–¥–Ω–æ –∏–∑ –≤—Ä–∞–∂–¥–µ–±–Ω—ã—Ö –ø–ª–µ–º—ë–Ω –Ω–∞ –∑–∞–ø–∞–¥–Ω—ã—Ö –≥—Ä–∞–Ω–∏—Ü–∞—Ö –®–∞–Ω" },
  { char: "Êúï", meaning: "–º–æ–π (—Ç–æ–ª—å–∫–æ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è!) ‚Äî –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–¥–ª–µ–∂–∞—â–∏–º, —Ç–æ–ª—å–∫–æ ¬´–º–æ–π –ø–æ—Å–ª–∞–Ω–Ω–∏–∫¬ª, ¬´–º–æ—è –ø–æ–º–æ—â—å¬ª –∏ —Ç.–¥." }
];

pairs = pairs2;

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");
      wordList.innerHTML = "";
      defList.innerHTML = "";
      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;

      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      el.classList.add("selected");
      const selectedMeaning = el.dataset.meaning;
      const selectedChar = selectedWord.dataset.char;

      // –ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –ø–∞—Ä—ã
      const correctPair = pairs.find(p => p.char === selectedChar);
      if (correctPair && correctPair.meaning === selectedMeaning) {
        // –í–µ—Ä–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        selectedWord.classList.add("matched");
        el.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 10) {
          const resultEl = document.getElementById("result");
          resultEl.innerHTML = `
            ‚úÖ <strong>–û—Ç–ª–∏—á–Ω–æ!</strong> –í—ã —É—Å–≤–æ–∏–ª–∏ –∫–ª—é—á–µ–≤—É—é –ª–µ–∫—Å–∏–∫—É –£—Ä–æ–∫–∞ 5:<br>
            ‚Ä¢ –ë–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ (<strong>Â∏ù</strong>)<br>
            ‚Ä¢ –ì–ª–∞–≥–æ–ª—ã ¬´–¥–∞—Ç—å/–Ω–∞–Ω–µ—Å—Ç–∏¬ª (<strong>Èôç</strong>, <strong>‰Ωú</strong>)<br>
            ‚Ä¢ –ú–µ—Å—Ç–æ–∏–º–µ–Ω–∏—è —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏ (<strong>Êúï</strong>, <strong>‰πÉ</strong>)<br>
            ‚Ä¢ –ü—Ä–∏—Ä–æ–¥–Ω—ã–µ —è–≤–ª–µ–Ω–∏—è (<strong>ÁÜØ</strong>, <strong>Á¶ç</strong>)
          `;
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        // –û—à–∏–±–∫–∞
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        el.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>


=== üìÑ task19.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ: –£—Ä–æ–∫ 5</title>
</head>
<body>
  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ –∑–Ω–∞—á–µ–Ω–∏–µ</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∞</p>
  
  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–ó–Ω–∞—á–µ–Ω–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>

  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    // –°–ª–æ–≤–∞—Ä—å –£—Ä–æ–∫–∞ 5 ‚Äî –∫–ª—é—á–µ–≤—ã–µ –ª–µ–∫—Å–µ–º—ã —Å –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ –∏ –∫—É–ª—å—Ç—É—Ä–Ω—ã–º–∏ –ø–æ—è—Å–Ω–µ–Ω–∏—è–º–∏
// –ü–µ—Ä–≤–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs1 = [
  { char: "Â∏ù", meaning: "–ù–µ–±–µ—Å–Ω—ã–π –í–ª–∞–¥—ã–∫–∞ ‚Äî –≤—ã—Å—à–µ–µ –±–æ–∂–µ—Å—Ç–≤–æ, –æ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ –∑–∞–≤–∏—Å—è—Ç —É—Ä–æ–∂–∞–π, –ø–æ–±–µ–¥–∞ –∏ –ø—Ä–∏—Ä–æ–¥–Ω—ã–µ —è–≤–ª–µ–Ω–∏—è" },
  { char: "ÁÜØ", meaning: "–∏—Å—Å—É—à–∏—Ç—å, –≤—ã–∑–≤–∞—Ç—å –∑–∞—Å—É—Ö—É ‚Äî –ø—Ä–∏—Ä–æ–¥–Ω–æ–µ –±–µ–¥—Å—Ç–≤–∏–µ, –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ—Å—Ç—å –¥–æ–∂–¥—é" },
  { char: "Áî≥", meaning: "–∑–∞—è—Ü (–∑–µ–º–Ω–∞—è –≤–µ—Ç–≤—å); —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç –æ–∑–Ω–∞—á–∞—Ç—å '–∑–∞—è–≤–ª—è—Ç—å, –æ–±—ä—è–≤–ª—è—Ç—å'" },
  { char: "Èôç", meaning: "–ø–æ—Å–ª–∞—Ç—å (—Å–≤–µ—Ä—Ö—É –≤–Ω–∏–∑) ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å –±–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, ¬´–ø–æ—Å–ª–∞—Ç—å –ø–æ–º–æ—â—å¬ª –∏–ª–∏ ¬´–ø–æ—Å–ª–∞—Ç—å –∑–∞—Å—É—Ö—É¬ª" },
  { char: "‰ºê", meaning: "–Ω–∞–Ω–µ—Å—Ç–∏ —É–¥–∞—Ä, –Ω–∞–ø–∞—Å—Ç—å ‚Äî –≤–æ–µ–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ, —á–∞—Å—Ç–æ —Å–æ–≤–µ—Ä—à–∞–µ—Ç—Å—è —Å –±–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è" }
];

// –í—Ç–æ—Ä–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs2 = [
  { char: "‰Ωë", meaning: "–ø–æ–º–æ—â—å, –ø–æ–∫—Ä–æ–≤–∏—Ç–µ–ª—å—Å—Ç–≤–æ ‚Äî –æ–±—ã—á–Ω–æ –æ—Ç –ù–µ–±–µ—Å–Ω–æ–≥–æ –í–ª–∞–¥—ã–∫–∏; –≤ –≥–ª–∞–≥–æ–ª—å–Ω–æ–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ ¬´Âèó‰Ωë¬ª ‚Äî ¬´–ø–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å¬ª" },
  { char: "Ê¥π", meaning: "—Ä–µ–∫–∞ –•—É–∞–Ω—å ‚Äî –ø—Ä–∏—Ç–æ–∫ –•—É–∞–Ω—Ö—ç, —É–≥—Ä–æ–∂–∞–≤—à–∞—è –Ω–∞–≤–æ–¥–Ω–µ–Ω–∏—è–º–∏ —Å—Ç–æ–ª–∏—Ü–µ –®–∞–Ω" },
  { char: "‰Ωú", meaning: "–Ω–∞–Ω–µ—Å—Ç–∏, –ø—Ä–∏—á–∏–Ω–∏—Ç—å (–≤—Ä–µ–¥) ‚Äî —á–∞—Å—Ç–æ —Å ¬´Á•∏¬ª: ¬´‰ΩúÁ•∏¬ª = ¬´–Ω–∞–≤—Ä–µ–¥–∏—Ç—å, –ø—Ä–∏–Ω–µ—Å—Ç–∏ –Ω–µ—Å—á–∞—Å—Ç—å–µ¬ª" },
  { char: "Ëå≤", meaning: "—ç—Ç–æ—Ç, –∑–¥–µ—Å—å ‚Äî —É–∫–∞–∑–∞—Ç–µ–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏–µ –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ –∏ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞, —Å–∏–Ω–æ–Ω–∏–º ¬´‰ªä¬ª" },
  { char: "Á¶ç", meaning: "–±–µ–¥—Å—Ç–≤–∏–µ, –Ω–µ—Å—á–∞—Å—Ç—å–µ ‚Äî –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω–æ —Ä–µ–∫–æ–π, –ø–ª–µ–º–µ–Ω–∞–º–∏ –∏–ª–∏ –±–æ–∂–µ—Å—Ç–≤–æ–º" }
];

// –¢—Ä–µ—Ç—å—è –ø—è—Ç–µ—Ä–∫–∞
const pairs3 = [
  { char: "‰Ωô", meaning: "—è (1-–µ –ª–∏—Ü–æ) ‚Äî –ø–æ–¥–ª–µ–∂–∞—â–µ–µ –∏–ª–∏ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ; –º–æ–∂–µ—Ç –æ–∑–Ω–∞—á–∞—Ç—å –∏ '–º—ã'" },
  { char: "Âæó", meaning: "–ø–æ–ª—É—á–∏—Ç—å, –æ–±—Ä–µ—Å—Ç–∏ ‚Äî —á–∞—Å—Ç–æ –≤ –∑–Ω–∞—á–µ–Ω–∏–∏ '—É–¥–∞—Å—Ç—Å—è –ª–∏ –ø–æ–ª—É—á–∏—Ç—å'" },
  { char: "Ê±ù", meaning: "—Ç—ã (2-–µ –ª–∏—Ü–æ) ‚Äî –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–¥–ª–µ–∂–∞—â–∏–º –∏–ª–∏ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ–º" },
  { char: "‰Ωø", meaning: "–ø–æ—Å–ª–∞–Ω–Ω–∏–∫, –ø–æ—Å–æ–ª ‚Äî —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ, –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–æ–µ –æ—Ç –≥–ª–∞–≥–æ–ª–∞ '–ø–æ—Å—ã–ª–∞—Ç—å'" },
  { char: "Âêà", meaning: "—Å–æ–±—Ä–∞—Ç—å, –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å (–≤–æ–∏–Ω–æ–≤) ‚Äî –≤–æ–µ–Ω–Ω–∞—è –º–æ–±–∏–ª–∏–∑–∞—Ü–∏—è" }
];

// –ß–µ—Ç–≤—ë—Ä—Ç–∞—è –ø—è—Ç–µ—Ä–∫–∞ (–Ω–µ–ø–æ–ª–Ω–∞—è)
const pairs4 = [
  { char: "‰πÉ", meaning: "—Ç–≤–æ–π (2-–µ –ª–∏—Ü–æ, —Ç–æ–ª—å–∫–æ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è!) ‚Äî –Ω–∞–ø—Ä–∏–º–µ—Ä, ¬´—Ç–≤–æ–π –ø–æ—Å–ª–∞–Ω–Ω–∏–∫¬ª" },
  { char: "‰ª•", meaning: "–ø—Ä–∏–≤–µ—Å—Ç–∏, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å (–ø–æ—Å–ª–∞–Ω–Ω–∏–∫–æ–≤) ‚Äî –≥–ª–∞–≥–æ–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è" },
  { char: "Áæå", meaning: "–ø–ª–µ–º—è –¶—è–Ω—å ‚Äî –æ–¥–Ω–æ –∏–∑ –≤—Ä–∞–∂–¥–µ–±–Ω—ã—Ö –ø–ª–µ–º—ë–Ω –Ω–∞ –∑–∞–ø–∞–¥–Ω—ã—Ö –≥—Ä–∞–Ω–∏—Ü–∞—Ö –®–∞–Ω" },
  { char: "Êúï", meaning: "–º–æ–π (—Ç–æ–ª—å–∫–æ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è!) ‚Äî –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–¥–ª–µ–∂–∞—â–∏–º, —Ç–æ–ª—å–∫–æ ¬´–º–æ–π –ø–æ—Å–ª–∞–Ω–Ω–∏–∫¬ª, ¬´–º–æ—è –ø–æ–º–æ—â—å¬ª –∏ —Ç.–¥." }
];

pairs = pairs3;

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");
      wordList.innerHTML = "";
      defList.innerHTML = "";
      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;

      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      el.classList.add("selected");
      const selectedMeaning = el.dataset.meaning;
      const selectedChar = selectedWord.dataset.char;

      // –ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –ø–∞—Ä—ã
      const correctPair = pairs.find(p => p.char === selectedChar);
      if (correctPair && correctPair.meaning === selectedMeaning) {
        // –í–µ—Ä–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        selectedWord.classList.add("matched");
        el.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 10) {
          const resultEl = document.getElementById("result");
          resultEl.innerHTML = `
            ‚úÖ <strong>–û—Ç–ª–∏—á–Ω–æ!</strong> –í—ã —É—Å–≤–æ–∏–ª–∏ –∫–ª—é—á–µ–≤—É—é –ª–µ–∫—Å–∏–∫—É –£—Ä–æ–∫–∞ 5:<br>
            ‚Ä¢ –ë–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ (<strong>Â∏ù</strong>)<br>
            ‚Ä¢ –ì–ª–∞–≥–æ–ª—ã ¬´–¥–∞—Ç—å/–Ω–∞–Ω–µ—Å—Ç–∏¬ª (<strong>Èôç</strong>, <strong>‰Ωú</strong>)<br>
            ‚Ä¢ –ú–µ—Å—Ç–æ–∏–º–µ–Ω–∏—è —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏ (<strong>Êúï</strong>, <strong>‰πÉ</strong>)<br>
            ‚Ä¢ –ü—Ä–∏—Ä–æ–¥–Ω—ã–µ —è–≤–ª–µ–Ω–∏—è (<strong>ÁÜØ</strong>, <strong>Á¶ç</strong>)
          `;
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        // –û—à–∏–±–∫–∞
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        el.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>


=== üìÑ task2.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</title>
</head>
<body>
  <h2>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</h2>
  <div class="instructions">
    <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∑—É:</strong></p>
    <p><em>–ù–µ–±–µ—Å–Ω—ã–π –í–ª–∞–¥—ã–∫–∞ –ø–æ—à–ª–µ—Ç –Ω–∞–º –ø–æ–º–æ—â—å.</em></p>
  </div>
  <!-- –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ -->
  <div class="toggle-hint" id="toggle-hint-btn">–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏</div>
  <!-- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–æ–¥—Å–∫–∞–∑–æ–∫ (—Å–∫—Ä—ã—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) -->
  <div class="hint-container" id="hint-container">
    <ul class="hint-list">
      <li>Â∏ù ‚Äî –ù–µ–±–µ—Å–Ω—ã–π –í–ª–∞–¥—ã–∫–∞</li>
      <li>Âèó ‚Äî –¥–∞—Ä–æ–≤–∞—Ç—å, –ø–æ—à–ª—ë—Ç</li>
      <li>Êàë ‚Äî –Ω–∞–º</li>
      <li>‰Ωë ‚Äî –ø–æ–º–æ—â—å</li>
    </ul>
  </div>
  <p><strong>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã:</strong></p>
  <div id="char-pool"></div>
  <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ –∑–¥–µ—Å—å:</strong></p>
  <div id="drop-area"></div>
  <div class="controls">
    <button id="check-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
    <button id="reset-btn">–°–±—Ä–æ—Å–∏—Ç—å</button>
  </div>
  <p id="result" class="message"></p>
  <script>
    const expected = ['Â∏ù', 'Âèó', 'Êàë', '‰Ωë'];
    const allChars = [
      'Â∏ù', 'Âèó', 'Êàë', '‰Ωë',
      '‰∏ç', 'ÂÖ∂', 'ÁÜØ', 'Èôç', '‰ºê', '‰Ωú', 'Á•∏', '‰Ωô', 'Ê±ù', '‰πÉ', '‰ª•'
    ].sort(() => Math.random() - 0.5);
    const toggleBtn = document.getElementById('toggle-hint-btn');
    const hintContainer = document.getElementById('hint-container');
    const charPool = document.getElementById('char-pool');
    const dropArea = document.getElementById('drop-area');
    const checkBtn = document.getElementById('check-btn');
    const resetBtn = document.getElementById('reset-btn');
    const resultEl = document.getElementById('result');
    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫
    toggleBtn.addEventListener('click', () => {
      const isOpen = hintContainer.classList.contains('open');
      hintContainer.classList.toggle('open');
      toggleBtn.textContent = isOpen ? '–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏' : '–°–∫—Ä—ã—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏';
    });
    function moveToDropArea(box) {
      const clone = box.cloneNode(true);
      clone.draggable = false;
      clone.style.cursor = 'default';
      clone.onclick = null;
      box.remove();
      dropArea.appendChild(clone);
    }
    function initCharPool() {
      charPool.innerHTML = '';
      dropArea.innerHTML = '';
      resultEl.textContent = '';
      allChars.forEach(char => {
        const box = document.createElement('div');
        box.className = 'char-box';
        box.textContent = char;
        box.addEventListener('click', () => moveToDropArea(box));
        charPool.appendChild(box);
      });
    }
    checkBtn.addEventListener('click', () => {
      const current = Array.from(dropArea.children).map(el => el.textContent);
      if (arraysEqual(current, expected)) {
        resultEl.innerHTML = '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!<br>Â∏ùÂèóÊàë‰Ωë';
        resultEl.className = 'message success';
        sendResult(true);
      } else {
        resultEl.textContent = '‚ùå –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
        resultEl.className = 'message';
        sendResult(false, '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫');
      }
    });
    resetBtn.addEventListener('click', initCharPool);
    function arraysEqual(a, b) {
      return a.length === b.length && a.every((v, i) => v === b[i]);
    }
    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–§—Ä–∞–∑–∞ —Å–æ–±—Ä–∞–Ω–∞ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞ –≤ –ø–æ—Ä—è–¥–∫–µ")
      }, "*");
    }
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    initCharPool();
    // –°–∏–≥–Ω–∞–ª, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>

=== üìÑ task20.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ: –£—Ä–æ–∫ 5</title>
</head>
<body>
  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ –∑–Ω–∞—á–µ–Ω–∏–µ</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∞</p>
  
  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–ó–Ω–∞—á–µ–Ω–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>

  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    // –°–ª–æ–≤–∞—Ä—å –£—Ä–æ–∫–∞ 5 ‚Äî –∫–ª—é—á–µ–≤—ã–µ –ª–µ–∫—Å–µ–º—ã —Å –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ –∏ –∫—É–ª—å—Ç—É—Ä–Ω—ã–º–∏ –ø–æ—è—Å–Ω–µ–Ω–∏—è–º–∏
// –ü–µ—Ä–≤–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs1 = [
  { char: "Â∏ù", meaning: "–ù–µ–±–µ—Å–Ω—ã–π –í–ª–∞–¥—ã–∫–∞ ‚Äî –≤—ã—Å—à–µ–µ –±–æ–∂–µ—Å—Ç–≤–æ, –æ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ –∑–∞–≤–∏—Å—è—Ç —É—Ä–æ–∂–∞–π, –ø–æ–±–µ–¥–∞ –∏ –ø—Ä–∏—Ä–æ–¥–Ω—ã–µ —è–≤–ª–µ–Ω–∏—è" },
  { char: "ÁÜØ", meaning: "–∏—Å—Å—É—à–∏—Ç—å, –≤—ã–∑–≤–∞—Ç—å –∑–∞—Å—É—Ö—É ‚Äî –ø—Ä–∏—Ä–æ–¥–Ω–æ–µ –±–µ–¥—Å—Ç–≤–∏–µ, –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ—Å—Ç—å –¥–æ–∂–¥—é" },
  { char: "Áî≥", meaning: "–∑–∞—è—Ü (–∑–µ–º–Ω–∞—è –≤–µ—Ç–≤—å); —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç –æ–∑–Ω–∞—á–∞—Ç—å '–∑–∞—è–≤–ª—è—Ç—å, –æ–±—ä—è–≤–ª—è—Ç—å'" },
  { char: "Èôç", meaning: "–ø–æ—Å–ª–∞—Ç—å (—Å–≤–µ—Ä—Ö—É –≤–Ω–∏–∑) ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å –±–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, ¬´–ø–æ—Å–ª–∞—Ç—å –ø–æ–º–æ—â—å¬ª –∏–ª–∏ ¬´–ø–æ—Å–ª–∞—Ç—å –∑–∞—Å—É—Ö—É¬ª" },
  { char: "‰ºê", meaning: "–Ω–∞–Ω–µ—Å—Ç–∏ —É–¥–∞—Ä, –Ω–∞–ø–∞—Å—Ç—å ‚Äî –≤–æ–µ–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ, —á–∞—Å—Ç–æ —Å–æ–≤–µ—Ä—à–∞–µ—Ç—Å—è —Å –±–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è" }
];

// –í—Ç–æ—Ä–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs2 = [
  { char: "‰Ωë", meaning: "–ø–æ–º–æ—â—å, –ø–æ–∫—Ä–æ–≤–∏—Ç–µ–ª—å—Å—Ç–≤–æ ‚Äî –æ–±—ã—á–Ω–æ –æ—Ç –ù–µ–±–µ—Å–Ω–æ–≥–æ –í–ª–∞–¥—ã–∫–∏; –≤ –≥–ª–∞–≥–æ–ª—å–Ω–æ–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ ¬´Âèó‰Ωë¬ª ‚Äî ¬´–ø–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å¬ª" },
  { char: "Ê¥π", meaning: "—Ä–µ–∫–∞ –•—É–∞–Ω—å ‚Äî –ø—Ä–∏—Ç–æ–∫ –•—É–∞–Ω—Ö—ç, —É–≥—Ä–æ–∂–∞–≤—à–∞—è –Ω–∞–≤–æ–¥–Ω–µ–Ω–∏—è–º–∏ —Å—Ç–æ–ª–∏—Ü–µ –®–∞–Ω" },
  { char: "‰Ωú", meaning: "–Ω–∞–Ω–µ—Å—Ç–∏, –ø—Ä–∏—á–∏–Ω–∏—Ç—å (–≤—Ä–µ–¥) ‚Äî —á–∞—Å—Ç–æ —Å ¬´Á•∏¬ª: ¬´‰ΩúÁ•∏¬ª = ¬´–Ω–∞–≤—Ä–µ–¥–∏—Ç—å, –ø—Ä–∏–Ω–µ—Å—Ç–∏ –Ω–µ—Å—á–∞—Å—Ç—å–µ¬ª" },
  { char: "Ëå≤", meaning: "—ç—Ç–æ—Ç, –∑–¥–µ—Å—å ‚Äî —É–∫–∞–∑–∞—Ç–µ–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏–µ –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ –∏ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞, —Å–∏–Ω–æ–Ω–∏–º ¬´‰ªä¬ª" },
  { char: "Á¶ç", meaning: "–±–µ–¥—Å—Ç–≤–∏–µ, –Ω–µ—Å—á–∞—Å—Ç—å–µ ‚Äî –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω–æ —Ä–µ–∫–æ–π, –ø–ª–µ–º–µ–Ω–∞–º–∏ –∏–ª–∏ –±–æ–∂–µ—Å—Ç–≤–æ–º" }
];

// –¢—Ä–µ—Ç—å—è –ø—è—Ç–µ—Ä–∫–∞
const pairs3 = [
  { char: "‰Ωô", meaning: "—è (1-–µ –ª–∏—Ü–æ) ‚Äî –ø–æ–¥–ª–µ–∂–∞—â–µ–µ –∏–ª–∏ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ; –º–æ–∂–µ—Ç –æ–∑–Ω–∞—á–∞—Ç—å –∏ '–º—ã'" },
  { char: "Âæó", meaning: "–ø–æ–ª—É—á–∏—Ç—å, –æ–±—Ä–µ—Å—Ç–∏ ‚Äî —á–∞—Å—Ç–æ –≤ –∑–Ω–∞—á–µ–Ω–∏–∏ '—É–¥–∞—Å—Ç—Å—è –ª–∏ –ø–æ–ª—É—á–∏—Ç—å'" },
  { char: "Ê±ù", meaning: "—Ç—ã (2-–µ –ª–∏—Ü–æ) ‚Äî –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–¥–ª–µ–∂–∞—â–∏–º –∏–ª–∏ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ–º" },
  { char: "‰Ωø", meaning: "–ø–æ—Å–ª–∞–Ω–Ω–∏–∫, –ø–æ—Å–æ–ª ‚Äî —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ, –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–æ–µ –æ—Ç –≥–ª–∞–≥–æ–ª–∞ '–ø–æ—Å—ã–ª–∞—Ç—å'" },
  { char: "Âêà", meaning: "—Å–æ–±—Ä–∞—Ç—å, –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å (–≤–æ–∏–Ω–æ–≤) ‚Äî –≤–æ–µ–Ω–Ω–∞—è –º–æ–±–∏–ª–∏–∑–∞—Ü–∏—è" }
];

// –ß–µ—Ç–≤—ë—Ä—Ç–∞—è –ø—è—Ç–µ—Ä–∫–∞ (–Ω–µ–ø–æ–ª–Ω–∞—è)
const pairs4 = [
  { char: "‰πÉ", meaning: "—Ç–≤–æ–π (2-–µ –ª–∏—Ü–æ, —Ç–æ–ª—å–∫–æ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è!) ‚Äî –Ω–∞–ø—Ä–∏–º–µ—Ä, ¬´—Ç–≤–æ–π –ø–æ—Å–ª–∞–Ω–Ω–∏–∫¬ª" },
  { char: "‰ª•", meaning: "–ø—Ä–∏–≤–µ—Å—Ç–∏, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å (–ø–æ—Å–ª–∞–Ω–Ω–∏–∫–æ–≤) ‚Äî –≥–ª–∞–≥–æ–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è" },
  { char: "Áæå", meaning: "–ø–ª–µ–º—è –¶—è–Ω—å ‚Äî –æ–¥–Ω–æ –∏–∑ –≤—Ä–∞–∂–¥–µ–±–Ω—ã—Ö –ø–ª–µ–º—ë–Ω –Ω–∞ –∑–∞–ø–∞–¥–Ω—ã—Ö –≥—Ä–∞–Ω–∏—Ü–∞—Ö –®–∞–Ω" },
  { char: "Êúï", meaning: "–º–æ–π (—Ç–æ–ª—å–∫–æ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è!) ‚Äî –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–¥–ª–µ–∂–∞—â–∏–º, —Ç–æ–ª—å–∫–æ ¬´–º–æ–π –ø–æ—Å–ª–∞–Ω–Ω–∏–∫¬ª, ¬´–º–æ—è –ø–æ–º–æ—â—å¬ª –∏ —Ç.–¥." }
];

pairs = pairs3;

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");
      wordList.innerHTML = "";
      defList.innerHTML = "";
      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;

      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      el.classList.add("selected");
      const selectedMeaning = el.dataset.meaning;
      const selectedChar = selectedWord.dataset.char;

      // –ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –ø–∞—Ä—ã
      const correctPair = pairs.find(p => p.char === selectedChar);
      if (correctPair && correctPair.meaning === selectedMeaning) {
        // –í–µ—Ä–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        selectedWord.classList.add("matched");
        el.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 10) {
          const resultEl = document.getElementById("result");
          resultEl.innerHTML = `
            ‚úÖ <strong>–û—Ç–ª–∏—á–Ω–æ!</strong> –í—ã —É—Å–≤–æ–∏–ª–∏ –∫–ª—é—á–µ–≤—É—é –ª–µ–∫—Å–∏–∫—É –£—Ä–æ–∫–∞ 5:<br>
            ‚Ä¢ –ë–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ (<strong>Â∏ù</strong>)<br>
            ‚Ä¢ –ì–ª–∞–≥–æ–ª—ã ¬´–¥–∞—Ç—å/–Ω–∞–Ω–µ—Å—Ç–∏¬ª (<strong>Èôç</strong>, <strong>‰Ωú</strong>)<br>
            ‚Ä¢ –ú–µ—Å—Ç–æ–∏–º–µ–Ω–∏—è —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏ (<strong>Êúï</strong>, <strong>‰πÉ</strong>)<br>
            ‚Ä¢ –ü—Ä–∏—Ä–æ–¥–Ω—ã–µ —è–≤–ª–µ–Ω–∏—è (<strong>ÁÜØ</strong>, <strong>Á¶ç</strong>)
          `;
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        // –û—à–∏–±–∫–∞
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        el.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>


=== üìÑ task21.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ</title>
</head>
<body>
  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —Å–ø—Ä–∞–≤–∞</p>
  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>
  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>
  <script>
    // –°–ª–æ–≤–∞—Ä—å –£—Ä–æ–∫–∞ 4 ‚Äî —Ç–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã–µ –ª–µ–∫—Å–µ–º—ã
const pairs1 = [
  { char: "Â∏ù", meaning: "d√¨" },
  { char: "ÁÜØ", meaning: "h√†n" },
  { char: "Áî≥", meaning: "shƒìn" },
  { char: "Èôç", meaning: "ji√†ng" },
  { char: "‰ºê", meaning: "f√°" }
];

const pairs2 = [
  { char: "‰Ωë", meaning: "y√≤u" },
  { char: "Ê¥π", meaning: "hu√°n" },
  { char: "‰Ωú", meaning: "zu√≤" },
  { char: "Ëå≤", meaning: "zƒ´" },
  { char: "Á¶ç", meaning: "hu√≤" }
];

const pairs3 = [
  { char: "‰Ωô", meaning: "y√∫" },
  { char: "Âæó", meaning: "d√©" },
  { char: "Ê±ù", meaning: "r«î" },
  { char: "‰Ωø", meaning: "sh«ê" },
  { char: "Âêà", meaning: "h√©" }
];

const pairs4 = [
  { char: "‰πÉ", meaning: "n«éi" },
  { char: "‰ª•", meaning: "y«ê" },
  { char: "Áæå", meaning: "qiƒÅng" },
  { char: "Êúï", meaning: "zh√®n" }
];
pairs = pairs1
    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");
      wordList.innerHTML = "";
      defList.innerHTML = "";
      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;

      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      el.classList.add("selected");
      const selectedMeaning = el.dataset.meaning;
      const selectedChar = selectedWord.dataset.char;

      // –ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –ø–∞—Ä—ã
      const correctPair = pairs.find(p => p.char === selectedChar);
      if (correctPair && correctPair.meaning === selectedMeaning) {
        // –í–µ—Ä–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        selectedWord.classList.add("matched");
        el.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 5) {
          const resultEl = document.getElementById("result");
          resultEl.textContent = "‚úÖ –í—Å–µ –ø–∞—Ä—ã –≤–µ—Ä–Ω—ã!";
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        // –û—à–∏–±–∫–∞
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        el.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task22.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ</title>
</head>
<body>
  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —Å–ø—Ä–∞–≤–∞</p>
  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>
  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>
  <script>
    // –°–ª–æ–≤–∞—Ä—å –£—Ä–æ–∫–∞ 4 ‚Äî —Ç–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã–µ –ª–µ–∫—Å–µ–º—ã
const pairs1 = [
  { char: "Â∏ù", meaning: "d√¨" },
  { char: "ÁÜØ", meaning: "h√†n" },
  { char: "Áî≥", meaning: "shƒìn" },
  { char: "Èôç", meaning: "ji√†ng" },
  { char: "‰ºê", meaning: "f√°" }
];

const pairs2 = [
  { char: "‰Ωë", meaning: "y√≤u" },
  { char: "Ê¥π", meaning: "hu√°n" },
  { char: "‰Ωú", meaning: "zu√≤" },
  { char: "Ëå≤", meaning: "zƒ´" },
  { char: "Á¶ç", meaning: "hu√≤" }
];

const pairs3 = [
  { char: "‰Ωô", meaning: "y√∫" },
  { char: "Âæó", meaning: "d√©" },
  { char: "Ê±ù", meaning: "r«î" },
  { char: "‰Ωø", meaning: "sh«ê" },
  { char: "Âêà", meaning: "h√©" }
];

const pairs4 = [
  { char: "‰πÉ", meaning: "n«éi" },
  { char: "‰ª•", meaning: "y«ê" },
  { char: "Áæå", meaning: "qiƒÅng" },
  { char: "Êúï", meaning: "zh√®n" }
];
pairs = pairs2
    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");
      wordList.innerHTML = "";
      defList.innerHTML = "";
      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;

      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      el.classList.add("selected");
      const selectedMeaning = el.dataset.meaning;
      const selectedChar = selectedWord.dataset.char;

      // –ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –ø–∞—Ä—ã
      const correctPair = pairs.find(p => p.char === selectedChar);
      if (correctPair && correctPair.meaning === selectedMeaning) {
        // –í–µ—Ä–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        selectedWord.classList.add("matched");
        el.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 5) {
          const resultEl = document.getElementById("result");
          resultEl.textContent = "‚úÖ –í—Å–µ –ø–∞—Ä—ã –≤–µ—Ä–Ω—ã!";
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        // –û—à–∏–±–∫–∞
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        el.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task23.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ</title>
</head>
<body>
  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —Å–ø—Ä–∞–≤–∞</p>
  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>
  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>
  <script>
    // –°–ª–æ–≤–∞—Ä—å –£—Ä–æ–∫–∞ 4 ‚Äî —Ç–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã–µ –ª–µ–∫—Å–µ–º—ã
const pairs1 = [
  { char: "Â∏ù", meaning: "d√¨" },
  { char: "ÁÜØ", meaning: "h√†n" },
  { char: "Áî≥", meaning: "shƒìn" },
  { char: "Èôç", meaning: "ji√†ng" },
  { char: "‰ºê", meaning: "f√°" }
];

const pairs2 = [
  { char: "‰Ωë", meaning: "y√≤u" },
  { char: "Ê¥π", meaning: "hu√°n" },
  { char: "‰Ωú", meaning: "zu√≤" },
  { char: "Ëå≤", meaning: "zƒ´" },
  { char: "Á¶ç", meaning: "hu√≤" }
];

const pairs3 = [
  { char: "‰Ωô", meaning: "y√∫" },
  { char: "Âæó", meaning: "d√©" },
  { char: "Ê±ù", meaning: "r«î" },
  { char: "‰Ωø", meaning: "sh«ê" },
  { char: "Âêà", meaning: "h√©" }
];

const pairs4 = [
  { char: "‰πÉ", meaning: "n«éi" },
  { char: "‰ª•", meaning: "y«ê" },
  { char: "Áæå", meaning: "qiƒÅng" },
  { char: "Êúï", meaning: "zh√®n" }
];
pairs = pairs3
    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");
      wordList.innerHTML = "";
      defList.innerHTML = "";
      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;

      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      el.classList.add("selected");
      const selectedMeaning = el.dataset.meaning;
      const selectedChar = selectedWord.dataset.char;

      // –ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –ø–∞—Ä—ã
      const correctPair = pairs.find(p => p.char === selectedChar);
      if (correctPair && correctPair.meaning === selectedMeaning) {
        // –í–µ—Ä–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        selectedWord.classList.add("matched");
        el.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 5) {
          const resultEl = document.getElementById("result");
          resultEl.textContent = "‚úÖ –í—Å–µ –ø–∞—Ä—ã –≤–µ—Ä–Ω—ã!";
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        // –û—à–∏–±–∫–∞
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        el.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task24.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ</title>
</head>
<body>
  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —Å–ø—Ä–∞–≤–∞</p>
  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>
  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>
  <script>
    // –°–ª–æ–≤–∞—Ä—å –£—Ä–æ–∫–∞ 4 ‚Äî —Ç–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã–µ –ª–µ–∫—Å–µ–º—ã
const pairs1 = [
  { char: "Â∏ù", meaning: "d√¨" },
  { char: "ÁÜØ", meaning: "h√†n" },
  { char: "Áî≥", meaning: "shƒìn" },
  { char: "Èôç", meaning: "ji√†ng" },
  { char: "‰ºê", meaning: "f√°" }
];

const pairs2 = [
  { char: "‰Ωë", meaning: "y√≤u" },
  { char: "Ê¥π", meaning: "hu√°n" },
  { char: "‰Ωú", meaning: "zu√≤" },
  { char: "Ëå≤", meaning: "zƒ´" },
  { char: "Á¶ç", meaning: "hu√≤" }
];

const pairs3 = [
  { char: "‰Ωô", meaning: "y√∫" },
  { char: "Âæó", meaning: "d√©" },
  { char: "Ê±ù", meaning: "r«î" },
  { char: "‰Ωø", meaning: "sh«ê" },
  { char: "Âêà", meaning: "h√©" }
];

const pairs4 = [
  { char: "‰πÉ", meaning: "n«éi" },
  { char: "‰ª•", meaning: "y«ê" },
  { char: "Áæå", meaning: "qiƒÅng" },
  { char: "Êúï", meaning: "zh√®n" }
];
pairs = pairs4
    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");
      wordList.innerHTML = "";
      defList.innerHTML = "";
      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;

      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      el.classList.add("selected");
      const selectedMeaning = el.dataset.meaning;
      const selectedChar = selectedWord.dataset.char;

      // –ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –ø–∞—Ä—ã
      const correctPair = pairs.find(p => p.char === selectedChar);
      if (correctPair && correctPair.meaning === selectedMeaning) {
        // –í–µ—Ä–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        selectedWord.classList.add("matched");
        el.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 5) {
          const resultEl = document.getElementById("result");
          resultEl.textContent = "‚úÖ –í—Å–µ –ø–∞—Ä—ã –≤–µ—Ä–Ω—ã!";
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        // –û—à–∏–±–∫–∞
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        el.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task3.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</title>
</head>
<body>
  <h2>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</h2>
  <div class="instructions">
    <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∑—É:</strong></p>
    <p><em>–Ø –ø–æ–ª—É—á—É –ø–æ–º–æ—â—å –æ—Ç –ø–ª–µ–º–µ–Ω–∏ –ú–∞.</em></p>
  </div>
  <!-- –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ -->
  <div class="toggle-hint" id="toggle-hint-btn">–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏</div>
  <!-- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–æ–¥—Å–∫–∞–∑–æ–∫ (—Å–∫—Ä—ã—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) -->
  <div class="hint-container" id="hint-container">
    <ul class="hint-list">
      <li>‰Ωô ‚Äî —è</li>
      <li>Âèó ‚Äî –ø–æ–ª—É—á—É, –ø–æ—à–ª—é—Ç</li>
      <li>È¶¨Êñπ ‚Äî –ø–ª–µ–º—è –ú–∞</li>
      <li>‰Ωë ‚Äî –ø–æ–º–æ—â—å</li>
    </ul>
  </div>
  <p><strong>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã:</strong></p>
  <div id="char-pool"></div>
  <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ –∑–¥–µ—Å—å:</strong></p>
  <div id="drop-area"></div>
  <div class="controls">
    <button id="check-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
    <button id="reset-btn">–°–±—Ä–æ—Å–∏—Ç—å</button>
  </div>
  <p id="result" class="message"></p>
  <script>
    const expected = ['‰Ωô', 'Âèó', 'È¶¨', 'Êñπ', '‰Ωë'];
    const allChars = [
      '‰Ωô', 'Âèó', 'È¶¨', 'Êñπ', '‰Ωë',
      'Â∏ù', 'Êàë', '‰∏ç', 'ÂÖ∂', '‰Ωú', 'Á•∏', '‰ª•', '‰πÉ', '‰ºê', 'Âæó'
    ].sort(() => Math.random() - 0.5);
    const toggleBtn = document.getElementById('toggle-hint-btn');
    const hintContainer = document.getElementById('hint-container');
    const charPool = document.getElementById('char-pool');
    const dropArea = document.getElementById('drop-area');
    const checkBtn = document.getElementById('check-btn');
    const resetBtn = document.getElementById('reset-btn');
    const resultEl = document.getElementById('result');
    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫
    toggleBtn.addEventListener('click', () => {
      const isOpen = hintContainer.classList.contains('open');
      hintContainer.classList.toggle('open');
      toggleBtn.textContent = isOpen ? '–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏' : '–°–∫—Ä—ã—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏';
    });
    function moveToDropArea(box) {
      const clone = box.cloneNode(true);
      clone.draggable = false;
      clone.style.cursor = 'default';
      clone.onclick = null;
      box.remove();
      dropArea.appendChild(clone);
    }
    function initCharPool() {
      charPool.innerHTML = '';
      dropArea.innerHTML = '';
      resultEl.textContent = '';
      allChars.forEach(char => {
        const box = document.createElement('div');
        box.className = 'char-box';
        box.textContent = char;
        box.addEventListener('click', () => moveToDropArea(box));
        charPool.appendChild(box);
      });
    }
    checkBtn.addEventListener('click', () => {
      const current = Array.from(dropArea.children).map(el => el.textContent);
      if (arraysEqual(current, expected)) {
        resultEl.innerHTML = '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!<br>‰ΩôÂèóÈ¶¨Êñπ‰Ωë';
        resultEl.className = 'message success';
        sendResult(true);
      } else {
        resultEl.textContent = '‚ùå –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
        resultEl.className = 'message';
        sendResult(false, '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫');
      }
    });
    resetBtn.addEventListener('click', initCharPool);
    function arraysEqual(a, b) {
      return a.length === b.length && a.every((v, i) => v === b[i]);
    }
    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–§—Ä–∞–∑–∞ —Å–æ–±—Ä–∞–Ω–∞ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞ –≤ –ø–æ—Ä—è–¥–∫–µ")
      }, "*");
    }
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    initCharPool();
    // –°–∏–≥–Ω–∞–ª, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>

=== üìÑ task4.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</title>
</head>
<body>
  <h2>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</h2>
  <div class="instructions">
    <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∑—É:</strong></p>
    <p><em>–ü—Ä–∞–≤–∏—Ç–µ–ª—å –Ω–µ –ø–æ—à–ª–µ—Ç –º–Ω–µ –ø–æ–º–æ—â—å.</em></p>
  </div>
  <!-- –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ -->
  <div class="toggle-hint" id="toggle-hint-btn">–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏</div>
  <!-- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–æ–¥—Å–∫–∞–∑–æ–∫ (—Å–∫—Ä—ã—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) -->
  <div class="hint-container" id="hint-container">
    <ul class="hint-list">
      <li>Áéã ‚Äî –ø—Ä–∞–≤–∏—Ç–µ–ª—å</li>
      <li>‰∏ç ‚Äî –Ω–µ</li>
      <li>Êàë ‚Äî –º–Ω–µ</li>
      <li>Âèó ‚Äî –ø–æ—à–ª—ë—Ç</li>
      <li>‰Ωë ‚Äî –ø–æ–º–æ—â—å</li>
    </ul>
  </div>
  <p><strong>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã:</strong></p>
  <div id="char-pool"></div>
  <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ –∑–¥–µ—Å—å:</strong></p>
  <div id="drop-area"></div>
  <div class="controls">
    <button id="check-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
    <button id="reset-btn">–°–±—Ä–æ—Å–∏—Ç—å</button>
  </div>
  <p id="result" class="message"></p>
  <script>
    const expected = ['Áéã', '‰∏ç', 'Êàë', 'Âèó', '‰Ωë'];
    const allChars = [
      'Áéã', '‰∏ç', 'Êàë', 'Âèó', '‰Ωë',
      'Â∏ù', 'ÂÖ∂', '‰Ωú', 'Á•∏', '‰Ωô', '‰ª•', '‰πÉ', '‰ºê', 'Âæó', 'Ê±ù'
    ].sort(() => Math.random() - 0.5);
    const toggleBtn = document.getElementById('toggle-hint-btn');
    const hintContainer = document.getElementById('hint-container');
    const charPool = document.getElementById('char-pool');
    const dropArea = document.getElementById('drop-area');
    const checkBtn = document.getElementById('check-btn');
    const resetBtn = document.getElementById('reset-btn');
    const resultEl = document.getElementById('result');
    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫
    toggleBtn.addEventListener('click', () => {
      const isOpen = hintContainer.classList.contains('open');
      hintContainer.classList.toggle('open');
      toggleBtn.textContent = isOpen ? '–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏' : '–°–∫—Ä—ã—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏';
    });
    function moveToDropArea(box) {
      const clone = box.cloneNode(true);
      clone.draggable = false;
      clone.style.cursor = 'default';
      clone.onclick = null;
      box.remove();
      dropArea.appendChild(clone);
    }
    function initCharPool() {
      charPool.innerHTML = '';
      dropArea.innerHTML = '';
      resultEl.textContent = '';
      allChars.forEach(char => {
        const box = document.createElement('div');
        box.className = 'char-box';
        box.textContent = char;
        box.addEventListener('click', () => moveToDropArea(box));
        charPool.appendChild(box);
      });
    }
    checkBtn.addEventListener('click', () => {
      const current = Array.from(dropArea.children).map(el => el.textContent);
      if (arraysEqual(current, expected)) {
        resultEl.innerHTML = '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!<br>Áéã‰∏çÊàëÂèó‰Ωë';
        resultEl.className = 'message success';
        sendResult(true);
      } else {
        resultEl.textContent = '‚ùå –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
        resultEl.className = 'message';
        sendResult(false, '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫');
      }
    });
    resetBtn.addEventListener('click', initCharPool);
    function arraysEqual(a, b) {
      return a.length === b.length && a.every((v, i) => v === b[i]);
    }
    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–§—Ä–∞–∑–∞ —Å–æ–±—Ä–∞–Ω–∞ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞ –≤ –ø–æ—Ä—è–¥–∫–µ")
      }, "*");
    }
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    initCharPool();
    // –°–∏–≥–Ω–∞–ª, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>

=== üìÑ task5.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</title>
</head>
<body>
  <h2>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</h2>
  <div class="instructions">
    <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∑—É:</strong></p>
    <p><em>–¶—è–Ω—ã –Ω–µ –Ω–∞–Ω–µ—Å—É—Ç –ø–æ—Ä–∞–∂–µ–Ω–∏–µ –º–æ–µ–º—É –ø–æ—Å–ª—É.</em></p>
  </div>
  <!-- –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ -->
  <div class="toggle-hint" id="toggle-hint-btn">–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏</div>
  <!-- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–æ–¥—Å–∫–∞–∑–æ–∫ (—Å–∫—Ä—ã—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) -->
  <div class="hint-container" id="hint-container">
    <ul class="hint-list">
      <li>Áæå ‚Äî —Ü—è–Ω—ã</li>
      <li>Âºó ‚Äî –Ω–µ</li>
      <li>Êúï ‚Äî –º–æ–π (–ø—Ä–∏—Ç—è–∂–∞—Ç–µ–ª—å–Ω–æ–µ)</li>
      <li>‰Ωø ‚Äî –ø–æ—Å–æ–ª</li>
      <li>ÁÉñ ‚Äî –Ω–∞–Ω–µ—Å—É—Ç –ø–æ—Ä–∞–∂–µ–Ω–∏–µ</li>
    </ul>
  </div>
  <p><strong>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã:</strong></p>
  <div id="char-pool"></div>
  <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ –∑–¥–µ—Å—å:</strong></p>
  <div id="drop-area"></div>
  <div class="controls">
    <button id="check-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
    <button id="reset-btn">–°–±—Ä–æ—Å–∏—Ç—å</button>
  </div>
  <p id="result" class="message"></p>
  <script>
    const expected = ['Áæå', 'Âºó', 'Êúï', '‰Ωø', 'ÁÉñ'];
    const allChars = [
      'Áæå', 'Âºó', 'Êúï', '‰Ωø', 'ÁÉñ',
      'Â∏ù', 'Êàë', '‰∏ç', 'ÂÖ∂', '‰Ωú', 'Á•∏', '‰Ωô', '‰ª•', '‰πÉ', 'Âæó'
    ].sort(() => Math.random() - 0.5);
    const toggleBtn = document.getElementById('toggle-hint-btn');
    const hintContainer = document.getElementById('hint-container');
    const charPool = document.getElementById('char-pool');
    const dropArea = document.getElementById('drop-area');
    const checkBtn = document.getElementById('check-btn');
    const resetBtn = document.getElementById('reset-btn');
    const resultEl = document.getElementById('result');
    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫
    toggleBtn.addEventListener('click', () => {
      const isOpen = hintContainer.classList.contains('open');
      hintContainer.classList.toggle('open');
      toggleBtn.textContent = isOpen ? '–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏' : '–°–∫—Ä—ã—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏';
    });
    function moveToDropArea(box) {
      const clone = box.cloneNode(true);
      clone.draggable = false;
      clone.style.cursor = 'default';
      clone.onclick = null;
      box.remove();
      dropArea.appendChild(clone);
    }
    function initCharPool() {
      charPool.innerHTML = '';
      dropArea.innerHTML = '';
      resultEl.textContent = '';
      allChars.forEach(char => {
        const box = document.createElement('div');
        box.className = 'char-box';
        box.textContent = char;
        box.addEventListener('click', () => moveToDropArea(box));
        charPool.appendChild(box);
      });
    }
    checkBtn.addEventListener('click', () => {
      const current = Array.from(dropArea.children).map(el => el.textContent);
      if (arraysEqual(current, expected)) {
        resultEl.innerHTML = '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!<br>ÁæåÂºóÊúï‰ΩøÁÉñ';
        resultEl.className = 'message success';
        sendResult(true);
      } else {
        resultEl.textContent = '‚ùå –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
        resultEl.className = 'message';
        sendResult(false, '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫');
      }
    });
    resetBtn.addEventListener('click', initCharPool);
    function arraysEqual(a, b) {
      return a.length === b.length && a.every((v, i) => v === b[i]);
    }
    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–§—Ä–∞–∑–∞ —Å–æ–±—Ä–∞–Ω–∞ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞ –≤ –ø–æ—Ä—è–¥–∫–µ")
      }, "*");
    }
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    initCharPool();
    // –°–∏–≥–Ω–∞–ª, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>

=== üìÑ task6.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</title>
</head>
<body>
  <h2>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</h2>
  <div class="instructions">
    <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∑—É:</strong></p>
    <p><em>–•–æ—É –•—É, —è –ø–æ–ª—É—á—É —Ç–µ–±—è (–≤ –∂—ë–Ω—ã).</em></p>
  </div>
  <!-- –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ -->
  <div class="toggle-hint" id="toggle-hint-btn">–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏</div>
  <!-- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–æ–¥—Å–∫–∞–∑–æ–∫ (—Å–∫—Ä—ã—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) -->
  <div class="hint-container" id="hint-container">
    <ul class="hint-list">
      <li>‰æØËôé ‚Äî –•–æ—É –•—É</li>
      <li>‰Ωô ‚Äî —è</li>
      <li>ÂÖ∂ ‚Äî –±—É–¥–µ—Ç</li>
      <li>Âæó ‚Äî –ø–æ–ª—É—á–∏—Ç—å (–≤ –∂—ë–Ω—ã)</li>
      <li>Ê±ù ‚Äî —Ç–µ–±—è</li>
    </ul>
  </div>
  <p><strong>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã:</strong></p>
  <div id="char-pool"></div>
  <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ –∑–¥–µ—Å—å:</strong></p>
  <div id="drop-area"></div>
  <div class="controls">
    <button id="check-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
    <button id="reset-btn">–°–±—Ä–æ—Å–∏—Ç—å</button>
  </div>
  <p id="result" class="message"></p>
  <script>
    const expected = ['‰æØ', 'Ëôé', '‰Ωô', 'ÂÖ∂', 'Âæó', 'Ê±ù'];
    const allChars = [
      '‰æØ', 'Ëôé', '‰Ωô', 'ÂÖ∂', 'Âæó', 'Ê±ù',
      'Â∏ù', 'Êàë', '‰∏ç', 'Âèó', '‰Ωë', '‰ª•', '‰πÉ', '‰Ωø', '‰ºê'
    ].sort(() => Math.random() - 0.5);
    const toggleBtn = document.getElementById('toggle-hint-btn');
    const hintContainer = document.getElementById('hint-container');
    const charPool = document.getElementById('char-pool');
    const dropArea = document.getElementById('drop-area');
    const checkBtn = document.getElementById('check-btn');
    const resetBtn = document.getElementById('reset-btn');
    const resultEl = document.getElementById('result');
    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫
    toggleBtn.addEventListener('click', () => {
      const isOpen = hintContainer.classList.contains('open');
      hintContainer.classList.toggle('open');
      toggleBtn.textContent = isOpen ? '–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏' : '–°–∫—Ä—ã—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏';
    });
    function moveToDropArea(box) {
      const clone = box.cloneNode(true);
      clone.draggable = false;
      clone.style.cursor = 'default';
      clone.onclick = null;
      box.remove();
      dropArea.appendChild(clone);
    }
    function initCharPool() {
      charPool.innerHTML = '';
      dropArea.innerHTML = '';
      resultEl.textContent = '';
      allChars.forEach(char => {
        const box = document.createElement('div');
        box.className = 'char-box';
        box.textContent = char;
        box.addEventListener('click', () => moveToDropArea(box));
        charPool.appendChild(box);
      });
    }
    checkBtn.addEventListener('click', () => {
      const current = Array.from(dropArea.children).map(el => el.textContent);
      if (arraysEqual(current, expected)) {
        resultEl.innerHTML = '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!<br>‰æØËôé‰ΩôÂÖ∂ÂæóÊ±ù';
        resultEl.className = 'message success';
        sendResult(true);
      } else {
        resultEl.textContent = '‚ùå –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
        resultEl.className = 'message';
        sendResult(false, '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫');
      }
    });
    resetBtn.addEventListener('click', initCharPool);
    function arraysEqual(a, b) {
      return a.length === b.length && a.every((v, i) => v === b[i]);
    }
    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–§—Ä–∞–∑–∞ —Å–æ–±—Ä–∞–Ω–∞ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞ –≤ –ø–æ—Ä—è–¥–∫–µ")
      }, "*");
    }
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    initCharPool();
    // –°–∏–≥–Ω–∞–ª, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>

=== üìÑ task7.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>–ó–∞–¥–∞–Ω–∏–µ: Â∏ùÂèóÊàë‰Ωë</title>
</head>
<body>
  <h2>–ö–∞–∫–æ–π –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–µ—Ä–µ–≤–æ–¥–æ–º —Ñ—Ä–∞–∑—ã ¬´Â∏ùÂèóÊàë‰Ωë¬ª?</h2>
  <p><strong>–ü—Ä–∏–º–µ—Ä: ¬´Â∏ùÂèóÊàë‰Ωë¬ª</strong></p>
  <div class="pinyin-container">
    <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">–ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å</button>
    <div class="pinyin-text">D√¨ sh√≤u w«í y√≤u</div>
  </div>
  <div id="answers"></div>
  <button onclick="check('answers', 'result', options)">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
  <p id="result"></p>
  <script>
    const options = [
      { text: "–ù–µ–±–µ—Å–Ω—ã–π –í–ª–∞–¥—ã–∫–∞ –ø–æ–ª—É—á–∏—Ç –º–æ—é –ø–æ–º–æ—â—å", correct: false },
      { text: "–ù–µ–±–µ—Å–Ω—ã–π –í–ª–∞–¥—ã–∫–∞ –ø–æ—à–ª—ë—Ç –º–Ω–µ –ø–æ–º–æ—â—å", correct: true },
      { text: "–Ø –ø–æ–ª—É—á—É –ø–æ–º–æ—â—å –æ—Ç –ù–µ–±–µ—Å–Ω–æ–≥–æ –í–ª–∞–¥—ã–∫–∏", correct: false },
      { text: "–ù–µ–±–µ—Å–Ω—ã–π –í–ª–∞–¥—ã–∫–∞ –Ω–µ –ø–æ—à–ª—ë—Ç –ø–æ–º–æ—â–∏", correct: false }
    ];

    function shuffle(array) {
      const arr = [...array];
      for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
      }
      return arr;
    }

    function renderOptions() {
      const shuffled = shuffle(options);
      const container = document.getElementById("answers");
      container.innerHTML = "";
      shuffled.forEach((opt, index) => {
        const label = document.createElement("label");
        const input = document.createElement("input");
        input.type = "radio";
        input.name = "q";
        input.value = opt.correct ? "1" : "0_" + index;
        input.dataset.correct = opt.correct.toString();
        label.appendChild(input);
        label.appendChild(document.createTextNode(opt.text));
        container.appendChild(label);
      });
    }

    function check(containerId, resultId, optionsArray) {
      const selected = document.querySelector('input[name="q"]:checked');
      const resultEl = document.getElementById(resultId);
      if (!selected) {
        resultEl.textContent = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç.";
        return;
      }
      if (selected.dataset.correct === "true") {
        resultEl.textContent = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!";
        sendResult(true);
      } else {
        resultEl.textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ.";
        sendResult(false);
      }
    }

    function sendResult(success) {
      window.parent.postMessage({ type: "TASK_RESULT", success }, "*");
    }

    window.onload = renderOptions;
  </script>
</body>
</html>
<script>window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");</script>

=== üìÑ task8.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>–ó–∞–¥–∞–Ω–∏–µ: Â∏ù‰∏çÊàëÂèó‰Ωë</title>
</head>
<body>
  <h2>–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è ¬´Â∏ù‰∏çÊàëÂèó‰Ωë¬ª?</h2>
  <p><strong>–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –ø–æ—Ä—è–¥–æ–∫ —Å–ª–æ–≤.</strong></p>
  <div class="pinyin-container">
    <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">–ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å</button>
    <div class="pinyin-text">D√¨ b√π w«í sh√≤u y√≤u</div>
  </div>
  <div id="answers"></div>
  <button onclick="check('answers', 'result', options)">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
  <p id="result"></p>
  <script>
    const options = [
      { text: "–ù–µ–±–µ—Å–Ω—ã–π –í–ª–∞–¥—ã–∫–∞ –Ω–µ –ø–æ—à–ª—ë—Ç –Ω–∞–º –ø–æ–º–æ—â–∏", correct: true },
      { text: "–ù–µ–±–µ—Å–Ω—ã–π –í–ª–∞–¥—ã–∫–∞ –ø–æ—à–ª—ë—Ç –Ω–∞–º –ø–æ–º–æ—â—å", correct: false },
      { text: "–ú—ã –Ω–µ –ø–æ–ª—É—á–∏–º —É—Ä–æ–∂–∞–π –æ—Ç –ù–µ–±–µ—Å–Ω–æ–≥–æ –í–ª–∞–¥—ã–∫–∏", correct: false },
      { text: "–ù–µ–±–µ—Å–Ω—ã–π –í–ª–∞–¥—ã–∫–∞ –Ω–µ –ø—Ä–∏–º–µ—Ç –º–æ—é –º–æ–ª–∏—Ç–≤—É", correct: false }
    ];

    function shuffle(array) {
      const arr = [...array];
      for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
      }
      return arr;
    }

    function renderOptions() {
      const shuffled = shuffle(options);
      const container = document.getElementById("answers");
      container.innerHTML = "";
      shuffled.forEach((opt, index) => {
        const label = document.createElement("label");
        const input = document.createElement("input");
        input.type = "radio";
        input.name = "q";
        input.value = opt.correct ? "1" : "0_" + index;
        input.dataset.correct = opt.correct.toString();
        label.appendChild(input);
        label.appendChild(document.createTextNode(opt.text));
        container.appendChild(label);
      });
    }

    function check(containerId, resultId, optionsArray) {
      const selected = document.querySelector('input[name="q"]:checked');
      const resultEl = document.getElementById(resultId);
      if (!selected) {
        resultEl.textContent = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç.";
        return;
      }
      if (selected.dataset.correct === "true") {
        resultEl.textContent = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!";
        sendResult(true);
      } else {
        resultEl.textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ.";
        sendResult(false);
      }
    }

    function sendResult(success) {
      window.parent.postMessage({ type: "TASK_RESULT", success }, "*");
    }

    window.onload = renderOptions;
  </script>
</body>
</html>
<script>window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");</script>

=== üìÑ task9.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>–ó–∞–¥–∞–Ω–∏–µ: ÁæåÂºóÊúï‰ΩøÁÉñ</title>
</head>
<body>
  <h2>–ö–∞–∫–æ–π –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ç–æ—á–Ω–æ –ø–µ—Ä–µ–¥–∞—ë—Ç —Å–º—ã—Å–ª —Ñ—Ä–∞–∑—ã ¬´ÁæåÂºóÊúï‰ΩøÁÉñ¬ª?</h2>
  <p><strong>–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏–µ –∏ –æ—Ç—Ä–∏—Ü–∞–Ω–∏–µ.</strong></p>
  <div class="pinyin-container">
    <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">–ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å</button>
    <div class="pinyin-text">QiƒÅng f√∫ zh√®n sh«ê zƒÅi</div>
  </div>
  <div id="answers"></div>
  <button onclick="check('answers', 'result', options)">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
  <p id="result"></p>
  <script>
    const options = [
      { text: "–¶—è–Ω—ã –Ω–µ –Ω–∞–Ω–µ—Å—É—Ç –ø–æ—Ä–∞–∂–µ–Ω–∏–µ –º–æ–µ–º—É –ø–æ—Å–ª—É", correct: true },
      { text: "–¶—è–Ω—ã –Ω–∞–Ω–µ—Å—É—Ç –ø–æ—Ä–∞–∂–µ–Ω–∏–µ –ø–æ—Å–ª—É –≤—Ä–∞–≥–∞", correct: false },
      { text: "–ú–æ–π –ø–æ—Å–æ–ª –Ω–µ –ø–æ–±–µ–¥–∏—Ç —Ü—è–Ω–æ–≤", correct: false },
      { text: "–¶—è–Ω—ã –Ω–µ –Ω–∞–ø–∞–¥—É—Ç –Ω–∞ –≥–æ—Ä–æ–¥", correct: false }
    ];

    function shuffle(array) {
      const arr = [...array];
      for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
      }
      return arr;
    }

    function renderOptions() {
      const shuffled = shuffle(options);
      const container = document.getElementById("answers");
      container.innerHTML = "";
      shuffled.forEach((opt, index) => {
        const label = document.createElement("label");
        const input = document.createElement("input");
        input.type = "radio";
        input.name = "q";
        input.value = opt.correct ? "1" : "0_" + index;
        input.dataset.correct = opt.correct.toString();
        label.appendChild(input);
        label.appendChild(document.createTextNode(opt.text));
        container.appendChild(label);
      });
    }

    function check(containerId, resultId, optionsArray) {
      const selected = document.querySelector('input[name="q"]:checked');
      const resultEl = document.getElementById(resultId);
      if (!selected) {
        resultEl.textContent = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç.";
        return;
      }
      if (selected.dataset.correct === "true") {
        resultEl.textContent = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!";
        sendResult(true);
      } else {
        resultEl.textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ.";
        sendResult(false);
      }
    }

    function sendResult(success) {
      window.parent.postMessage({ type: "TASK_RESULT", success }, "*");
    }

    window.onload = renderOptions;
  </script>
</body>
</html>
<script>window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");</script>

